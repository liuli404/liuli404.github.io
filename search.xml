<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo 搭配 Github Page 搭建个人博客</title>
      <link href="/9d7397c37e98/"/>
      <url>/9d7397c37e98/</url>
      
        <content type="html"><![CDATA[<p>​      由于工作需要，一直会有写笔记的需求。尝试过购买服务器自建 WordPress 写文章，但由于服务器需要自己维护，太浪费金钱与精力。为了满足记笔记的需求，找到了 Github Page + Hexo 的方案，无需运维，搭建简单，可以轻松满足个人博客的需求。本文为记录整个方案的搭建过程。</p><span id="more"></span><h1 id="一、资源准备"><a href="#一、资源准备" class="headerlink" title="一、资源准备"></a>一、资源准备</h1><p>GitHub Pages 文档：<a href="https://docs.github.com/zh/pages">https://docs.github.com/zh/pages</a></p><p>Hexo 文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>Next 主题文档：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a></p><p>由于将博客网站托管在 Github 上的，所以需要有一个账号，注册地址：<a href="https://github.com/">https://github.com/</a></p><table><thead><tr><th>资源</th><th>版本</th><th>地址</th><th>说明</th></tr></thead><tbody><tr><td>Git</td><td>2.38.1.windows.1</td><td><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></td><td>后续文章发布需要使用 git 工具</td></tr><tr><td>Node.js</td><td>18.14.0</td><td><a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></td><td>hexo 的运行环境，推荐下载长期维护版</td></tr></tbody></table><p>Git 与 Node.js 我这里使用的都是 Windows 版本，下载后直接安装向导安装即可。输入以下命令查看安装的版本：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># Git 版本</span>> git versiongit version 2<span class="token punctuation">.</span>38<span class="token punctuation">.</span>1<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>1<span class="token comment"># Node.js 版本</span>> node <span class="token operator">-</span>vv18<span class="token punctuation">.</span>14<span class="token punctuation">.</span>0> npm <span class="token operator">-</span>v9<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1</code></pre><h1 id="二、安装-Hexo"><a href="#二、安装-Hexo" class="headerlink" title="二、安装 Hexo"></a>二、安装 Hexo</h1><p>在本地新建一个文件夹作为本地仓库，名称自定义。在文件夹内打开终端命令行，输入以下命令：</p><ul><li>配置 npm 国内源</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm config <span class="token function">set</span> registry <span class="token string">"https://registry.npm.taobao.org"</span></code></pre><ul><li>安装 hexo 命令客户端</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">-</span>g hexo-<span class="token function">cli</span></code></pre><ul><li>初始化 hexo，生成 hexo 文件</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo init</code></pre><ul><li>安装依赖</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm install</code></pre><p>生成以下文件夹表示安装完成</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">Mode                 LastWriteTime         Length Name<span class="token operator">--</span><span class="token operator">--</span>                 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                <span class="token punctuation">.</span>githubd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:02                node_modulesd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                scaffolds <span class="token comment"># 模版文件夹。当新建文章时，会根据 scaffold 来建立文件。</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                source <span class="token comment"># 资源文件夹，用来存放资源的地方。</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                themes <span class="token comment"># 主题文件夹，Hexo 会根据主题来生成静态页面。</span><span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     20:57             89 <span class="token punctuation">.</span>gitignore<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:02          19716 db<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:02          89504 package-lock<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:00            619 package<span class="token punctuation">.</span>json <span class="token comment"># hexo 应用程序的信息，里面有版本与依赖。</span><span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     20:57              0 _config<span class="token punctuation">.</span>landscape<span class="token punctuation">.</span>yml<span class="token comment"># 自带的 landscape 主题配置文件。</span><span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     20:57           2546 _config<span class="token punctuation">.</span>yml <span class="token comment"># 网站的主配置信息，可以在此配置大部分的参数。</span></code></pre><p>服务启动命令，访问  <a href="http://localhost:4000/%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E3%80%82">http://localhost:4000/，查看博客主页。</a></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo s</code></pre><p><img src="/9d7397c37e98/image-20230220211258981.png" alt="image-20230220211258981"></p><h1 id="三、安装-Next-主题"><a href="#三、安装-Next-主题" class="headerlink" title="三、安装 Next 主题"></a>三、安装 Next 主题</h1><p>由于自带的默认主题太丑了，所以就有很多基于 hexo 框架的主题模板被开发出来，我个人比较喜欢 Next 这款主题，接下来就安装该主题。</p><ul><li>使用 git 直接安装最新版本的主题</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/next-theme/hexo-theme-next themes/next</code></pre><ul><li>安装完后，会在 themes 目录中产生 next 目录，里面是该主题的相关文件。</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">> <span class="token function">ls</span> themes\nextMode                 LastWriteTime         Length Name<span class="token operator">--</span><span class="token operator">--</span>                 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                <span class="token punctuation">.</span>githooksd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                <span class="token punctuation">.</span>githubd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                docsd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                languagesd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                layoutd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                scriptsd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                sourced-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                test<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            178 <span class="token punctuation">.</span>editorconfig<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25             51 <span class="token punctuation">.</span>eslintrc<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25             26 <span class="token punctuation">.</span>gitattributes<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            113 <span class="token punctuation">.</span>gitignore<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            602 <span class="token punctuation">.</span>stylelintrc<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            241 crowdin<span class="token punctuation">.</span>yml<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           3014 LICENSE<span class="token punctuation">.</span>md<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           1199 package<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           8911 README<span class="token punctuation">.</span>md<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25             46 renovate<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25          30273 _config<span class="token punctuation">.</span>yml<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           5040 _vendors<span class="token punctuation">.</span>yml</code></pre><ul><li>安装完成后，在 Hexo 配置文件中将 <code>theme</code> 设置为 <code>next</code>。</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> next</code></pre><ul><li>再次启动 hexo 查看安装后的效果</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo s</code></pre><p><img src="/9d7397c37e98/image-20230220213401476.png" alt="image-20230220213401476"></p><h1 id="四、编写文章"><a href="#四、编写文章" class="headerlink" title="四、编写文章"></a>四、编写文章</h1><p>编写文章分为三步，创建文章、编写文章、生成静态文件</p><h2 id="4-1-创建文章"><a href="#4-1-创建文章" class="headerlink" title="4.1 创建文章"></a>4.1 创建文章</h2><p>在终端使用命令创建一个新文章，格式 <code>hexo new [layout] title</code>，layout 不指定则默认是 post 类型，这里创建一个标题为”测试页面”的文章。</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"测试页面"</span></code></pre><p>查看 <code>source\_posts</code> 目录中，生成”测试页面.md”文件</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">source\_posts\测试页面<span class="token punctuation">.</span>md</code></pre><h2 id="4-2-编写文章"><a href="#4-2-编写文章" class="headerlink" title="4.2 编写文章"></a>4.2 编写文章</h2><p>这里由于生成的是 markdown 文件，这里需要懂一些基础的语法，并且推荐 typora 编辑工具。</p><p><img src="/9d7397c37e98/image-20230220215352672.png" alt="image-20230220215352672"></p><h2 id="4-3-生成静态文件"><a href="#4-3-生成静态文件" class="headerlink" title="4.3 生成静态文件"></a>4.3 生成静态文件</h2><p>编写完笔记后，就可以用命令生成静态页面了</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g hexo s</code></pre><p><img src="/9d7397c37e98/image-20230220215426978.png" alt="image-20230220215426978"></p><h1 id="五、部署至-GitHub"><a href="#五、部署至-GitHub" class="headerlink" title="五、部署至 GitHub"></a>五、部署至 GitHub</h1><h2 id="5-1-创建-GitHub-Pages"><a href="#5-1-创建-GitHub-Pages" class="headerlink" title="5.1 创建 GitHub Pages"></a>5.1 创建 GitHub Pages</h2><p>首先打开自己的 GitHub，创建一个 <code>你的帐号名.github.io</code> 的 Public 仓库，例如 <code>liuli404/github.io</code>。然后进入到该仓库的 Settings → Pages 页面，就可以看到访问地址了，一般是 <a href="https://username.github.io/">https://username.github.io</a> 格式的地址。</p><h2 id="5-2-创建-SSH-Key"><a href="#5-2-创建-SSH-Key" class="headerlink" title="5.2 创建 SSH Key"></a>5.2 创建 SSH Key</h2><p>由于文章都是在本地编写生成，想要发布到个人仓库就需要 git 等一系列命令，为了简化部署流程，可以在本地生成密钥，以密钥的方式发布至 GitHub。一直按回车确定即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"GitHub 的注册邮箱"</span></code></pre><h2 id="5-3-添加公钥到-GitHub"><a href="#5-3-添加公钥到-GitHub" class="headerlink" title="5.3 添加公钥到 GitHub"></a>5.3 添加公钥到 GitHub</h2><p>打开个人用户文件夹，里面已经生成一个”.ssh”文件夹，里面有刚刚生成的两个 ssh 密钥文件。</p><ul><li>id_rsa：是本机的私人秘钥</li><li>id_rsa.pub：是公共秘钥，复制该密钥的内容。</li></ul><p>打开你的 GitHub 网页页面，点击用户头像→Settings→SSH and GPG keys→New SSH key→将复制的内容粘贴到 Key 文本框中，标题随意，仅作自己区分用。然后点击 Add SSH key （添加 SSH）按钮。</p><p><img src="/9d7397c37e98/image-20230220232315645.png" alt="image-20230220232315645"></p><h2 id="5-4-检查免密登录"><a href="#5-4-检查免密登录" class="headerlink" title="5.4 检查免密登录"></a>5.4 检查免密登录</h2><p>在本地终端输入命令，查看到自己的 GitHub 用户名，表示免密认证通过。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.comHi liuli404<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre><h2 id="5-5-修改部署配置"><a href="#5-5-修改部署配置" class="headerlink" title="5.5 修改部署配置"></a>5.5 修改部署配置</h2><p>打开 hexo 的主配置文件 _config.yaml，在最下面找到 deploy 配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token string">'git@github.com:liuli404/liuli404.github.io.git'</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> <span class="token string">'main'</span></code></pre><h2 id="5-6-部署至-GItHub-Pages"><a href="#5-6-部署至-GItHub-Pages" class="headerlink" title="5.6 部署至 GItHub Pages"></a>5.6 部署至 GItHub Pages</h2><ul><li>部署之前安装 deploy-git 插件</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git</code></pre><ul><li>部署命令</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><p>当执行<code>hexo deploy</code>时，Hexo 会将<code>public</code>目录中的文件和目录推送至<code>_config.yml</code>中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><h1 id="六、自定义域名"><a href="#六、自定义域名" class="headerlink" title="六、自定义域名"></a>六、自定义域名</h1><h2 id="6-1-配置自定义域名"><a href="#6-1-配置自定义域名" class="headerlink" title="6.1 配置自定义域名"></a>6.1 配置自定义域名</h2><p>GitHub Pages 除了使用默认的域名访问，还支持自定义域名。需要将域名的 DNS 使用 CNAME 方式解析到对应的仓库地址，例如将 <code>blog.liuli.host</code> → <code>liuli404.github.io</code></p><p>然后打开仓库，进入 Settings → Pages 在 Custom domain 中填入你的自定义域名。</p><p><img src="/9d7397c37e98/image-20230220234039209.png" alt="image-20230220234039209"></p><h2 id="6-2-开启强制-HTTPS-访问"><a href="#6-2-开启强制-HTTPS-访问" class="headerlink" title="6.2 开启强制 HTTPS 访问"></a>6.2 开启强制 HTTPS 访问</h2><p>等待自定义域名的 DNS 检查通过，就可以开启强制 HTTPS 访问功能了，如下：</p><p><img src="/9d7397c37e98/image-20230220234129912.png" alt="image-20230220234129912"></p><h2 id="6-3-CNAME-被覆盖问题"><a href="#6-3-CNAME-被覆盖问题" class="headerlink" title="6.3 CNAME 被覆盖问题"></a>6.3 CNAME 被覆盖问题</h2><p>由于生成的 CNAME 在根目录，每次 deploy 都会被覆盖掉该文件，导致自定义域名无法访问博客，所以我们可以将 CNAME 文件放入本地 Hexo 中的 source 目录中，source 目录中的内容不会被 clean 指令删除，这样即使重新 deploy 也不影响 CNAME 的域名解析功能。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Page </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
