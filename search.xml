<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红米Redmi AX6000 刷 OpenWrt</title>
      <link href="/82817d9487c7/"/>
      <url>/82817d9487c7/</url>
      
        <content type="html"><![CDATA[<p>最近新买了个红米路由器，由于现在 OpenWrt 系统这么火，想着给新路由器也刷一个，发挥它的最大用处，本文记录的是 UBoot 大分区版的 OpenWrt 刷机过程。</p><span id="more"></span><p>准备工作：</p><ol><li>一根网线，连接电脑与路由器</li><li>卡针，用于初始化路由器 Reset 键</li><li>Uboot 与 OpenWrt 系统固件，百度网盘链接：<a href="https://pan.baidu.com/s/1v7Fgmhko0kR6ZysMbcguuw?pwd=jqem">https://pan.baidu.com/s/1v7Fgmhko0kR6ZysMbcguuw?pwd=jqem</a><br>提取码：jqem</li></ol><p>本文参考：</p><p>视频：<a href="https://youtu.be/zUvNv61Ylno">https://youtu.be/zUvNv61Ylno</a></p><p>文档：<a href="https://www.miaoer.xyz/posts/network/flash-redmi-ax6000">https://www.miaoer.xyz/posts/network/flash-redmi-ax6000</a></p><h1 id="一、开启-Telnet"><a href="#一、开启-Telnet" class="headerlink" title="一、开启 Telnet"></a>一、开启 Telnet</h1><p>获取自己家路由器管理端地址栏中的 stok 值，如 stok&#x3D;<strong>3df48a1976770ebb80cfcbe254ac3379</strong>，将下述网址替换成自己的后，输入浏览器执行。该值重启路由器后会更改，注意变化。</p><h2 id="1-1-开启开发模式"><a href="#1-1-开启开发模式" class="headerlink" title="1.1 开启开发模式"></a>1.1 开启开发模式</h2><pre class="language-bash" data-language="bash"><code class="language-bash">http://192.168.31.1/cgi-bin/luci/<span class="token punctuation">;</span><span class="token assign-left variable">stok</span><span class="token operator">=</span>3df48a1976770ebb80cfcbe254ac3379/api/misystem/set_sys_time?timezone<span class="token operator">=</span>%20%27%20%3B%20zz%3D%24%28dd%20if%3D%2Fdev%2Fzero%20bs%3D1%20count%3D2%202%3E%2Fdev%2Fnull%29%20%3B%20printf%20%27%A5%5A%25c%25c%27%20%24zz%20%24zz%20%7C%20mtd%20write%20-%20crash%20%3B%20</code></pre><p>浏览器返回 <code>&#123;&quot;code&quot;:0&#125;</code></p><h2 id="1-2-重启路由器"><a href="#1-2-重启路由器" class="headerlink" title="1.2 重启路由器"></a>1.2 重启路由器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">http://192.168.31.1/cgi-bin/luci/<span class="token punctuation">;</span><span class="token assign-left variable">stok</span><span class="token operator">=</span>3df48a1976770ebb80cfcbe254ac3379/api/misystem/set_sys_time?timezone<span class="token operator">=</span>%20%27%20%3b%20reboot%20%3b%20</code></pre><p>浏览器返回 <code>&#123;&quot;code&quot;:0&#125;</code></p><h2 id="1-3-永久开启-telnet"><a href="#1-3-永久开启-telnet" class="headerlink" title="1.3 永久开启 telnet"></a>1.3 永久开启 telnet</h2><p>等待路由器重启完成，重新访问路由器管理端，再次获取新生成的 stok 值。</p><pre class="language-bash" data-language="bash"><code class="language-bash">http://192.168.31.1/cgi-bin/luci/<span class="token punctuation">;</span><span class="token assign-left variable">stok</span><span class="token operator">=</span>a3418457d10632ebc8916c4a6f88dd53/api/misystem/set_sys_time?timezone<span class="token operator">=</span>%20%27%20%3B%20bdata%20set%20telnet_en%3D1%20%3B%20bdata%20set%20ssh_en%3D1%20%3B%20bdata%20set%20uart_en%3D1%20%3B%20bdata%20commit%20%3B%20</code></pre><p>浏览器返回 <code>&#123;&quot;code&quot;:0&#125;</code></p><h2 id="1-4-重启路由器"><a href="#1-4-重启路由器" class="headerlink" title="1.4 重启路由器"></a>1.4 重启路由器</h2><pre class="language-bash" data-language="bash"><code class="language-bash">http://192.168.31.1/cgi-bin/luci/<span class="token punctuation">;</span><span class="token assign-left variable">stok</span><span class="token operator">=</span>a3418457d10632ebc8916c4a6f88dd53/api/misystem/set_sys_time?timezone<span class="token operator">=</span>%20%27%20%3b%20reboot%20%3b%20</code></pre><p>浏览器返回 <code>&#123;&quot;code&quot;:0&#125;</code></p><h1 id="二、开启-SSH"><a href="#二、开启-SSH" class="headerlink" title="二、开启 SSH"></a>二、开启 SSH</h1><p>上一步骤开启了 Telnet 功能，接下来使用 telnet 连接路由器系统，手动开启 SSH 服务。注意协议、主机与端口号，默认是跟我一样。</p><p><img src="/82817d9487c7/image-20230226135519661.png" alt="image-20230226135519661"></p><p>登录后界面</p><p><img src="/82817d9487c7/image-20230226135913204.png" alt="image-20230226135913204"></p><h2 id="2-1-修改-root-默认密码"><a href="#2-1-修改-root-默认密码" class="headerlink" title="2.1 修改 root 默认密码"></a>2.1 修改 root 默认密码</h2><p>将 root 密码修改为 admin</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'admin\nadmin'</span> <span class="token operator">|</span> <span class="token function">passwd</span> root </code></pre><h2 id="2-2-固化-SSH"><a href="#2-2-固化-SSH" class="headerlink" title="2.2 固化 SSH"></a>2.2 固化 SSH</h2><pre class="language-bash" data-language="bash"><code class="language-bash">nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">ssh_en</span><span class="token operator">=</span><span class="token number">1</span>nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">telnet_en</span><span class="token operator">=</span><span class="token number">1</span>nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">uart_en</span><span class="token operator">=</span><span class="token number">1</span>nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">boot_wait</span><span class="token operator">=</span>onnvram commit</code></pre><h2 id="2-3-永久开启-SSH"><a href="#2-3-永久开启-SSH" class="headerlink" title="2.3 永久开启 SSH"></a>2.3 永久开启 SSH</h2><p>直接运行网上大神编写好的一键脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">--silent</span> <span class="token parameter variable">-O</span> https://fastly.jsdelivr.net/gh/miaoermua/unlock-redmi-ax6000@main/setup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x setup.sh <span class="token operator">&amp;&amp;</span> ./setup.sh</code></pre><ul><li>防止连接失效，setup.sh 脚本内容如下</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###</span> <span class="token comment"># @Author: ttimochan</span> <span class="token comment"># @Date: 2022-12-21 21:16:34</span> <span class="token comment"># @LastEditors: ttimochan</span> <span class="token comment"># @LastEditTime: 2023-01-22 18:47:49</span> <span class="token comment"># @FilePath: /unlock-redmi-ax6000/setup.sh</span><span class="token comment">### </span><span class="token comment">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span> <span class="token operator">!=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Error: You must be root to run this script, please use root user"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token function-name function">nvram_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'admin\nadmin'</span> <span class="token operator">|</span> <span class="token function">passwd</span> root    nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">ssh_en</span><span class="token operator">=</span><span class="token number">1</span>    nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">telnet_en</span><span class="token operator">=</span><span class="token number">1</span>    nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">uart_en</span><span class="token operator">=</span><span class="token number">1</span>    nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">boot_wait</span><span class="token operator">=</span>on    nvram commit<span class="token punctuation">&#125;</span><span class="token function-name function">set_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/channel=.*/channel="debug"/g'</span> /etc/init.d/dropbear    /etc/init.d/dropbear restart<span class="token punctuation">&#125;</span><span class="token function-name function">uci_readly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span> /data/auto_ssh    <span class="token builtin class-name">cd</span> /data/auto_ssh    <span class="token function">curl</span> <span class="token parameter variable">-O</span> https://fastly.jsdelivr.net/gh/lemoeo/AX6S@main/auto_ssh.sh    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> auto_ssh.sh <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Error: auto_ssh.sh download failed"</span>        <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token keyword">fi</span>    <span class="token function">chmod</span> +x auto_ssh.sh<span class="token punctuation">&#125;</span><span class="token function-name function">uci_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">firewall.auto_ssh</span><span class="token operator">=</span>include    uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">firewall.auto_ssh.type</span><span class="token operator">=</span><span class="token string">'script'</span>    uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">firewall.auto_ssh.path</span><span class="token operator">=</span><span class="token string">'/data/auto_ssh/auto_ssh.sh'</span>    uci <span class="token builtin class-name">set</span> <span class="token assign-left variable">firewall.auto_ssh.enabled</span><span class="token operator">=</span><span class="token string">'1'</span>    uci commit firewall    uci <span class="token builtin class-name">set</span> system.@system<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.timezone<span class="token operator">=</span><span class="token string">'CST-8'</span>    uci <span class="token builtin class-name">set</span> system.@system<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.webtimezone<span class="token operator">=</span><span class="token string">'CST-8'</span>    uci <span class="token builtin class-name">set</span> system.@system<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.timezoneindex<span class="token operator">=</span><span class="token string">'2.84'</span>    uci commit<span class="token punctuation">&#125;</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nvram_set    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>nvram get ssh_en<span class="token variable">)</span></span> <span class="token operator">!=</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Error: nvram_set failed"</span>        <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token keyword">fi</span>     set_init    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> dropbear <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span> <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Error: set_init failed"</span>        <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token keyword">fi</span>    uci_readly    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> /data/auto_ssh/auto_ssh.sh <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Error: uci_readly failed"</span>        <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token keyword">fi</span>    uci_start    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>uci show firewall <span class="token operator">|</span> <span class="token function">grep</span> auto_ssh <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span> <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"Error: uci_start failed"</span>        <span class="token builtin class-name">exit</span> <span class="token number">1</span>    <span class="token keyword">fi</span>    mtd erase crash        <span class="token builtin class-name">echo</span> <span class="token string">"all works done!"</span>    <span class="token function">sleep</span> <span class="token number">1</span>    <span class="token builtin class-name">echo</span> <span class="token string">"reboot 1 second later"</span>    <span class="token function">reboot</span><span class="token punctuation">&#125;</span>main</code></pre><ul><li>auto_ssh.sh 脚本内容如下</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">host_key</span><span class="token operator">=</span>/etc/dropbear/dropbear_rsa_host_key<span class="token assign-left variable">host_key_bk</span><span class="token operator">=</span>/data/auto_ssh/dropbear_rsa_host_key<span class="token comment"># 如果存在备份的SSH密钥，将备份的密钥链接到dropbear使用的密钥</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$host_key_bk</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">ln</span> <span class="token parameter variable">-sf</span> <span class="token variable">$host_key_bk</span> <span class="token variable">$host_key</span><span class="token keyword">fi</span><span class="token comment"># 当前固件为稳定版时，需要执行下面命令开启SSH</span><span class="token assign-left variable">channel</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>/sbin/uci get /usr/share/xiaoqiang/xiaoqiang_version.version.CHANNEL<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$channel</span>"</span> <span class="token operator">=</span> <span class="token string">"release"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/channel=.*/channel="debug"/g'</span> /etc/init.d/dropbear    /etc/init.d/dropbear restart<span class="token keyword">fi</span><span class="token comment"># 备份SSH密钥</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-s</span> <span class="token variable">$host_key_bk</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token parameter variable">-le</span> <span class="token number">30</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token variable">$host_key</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token function">cp</span> <span class="token parameter variable">-f</span> <span class="token variable">$host_key</span> <span class="token variable">$host_key_bk</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null            <span class="token builtin class-name">break</span>        <span class="token keyword">fi</span>        <span class="token builtin class-name">let</span> i++        <span class="token function">sleep</span> 1s    <span class="token keyword">done</span><span class="token keyword">fi</span></code></pre><h2 id="2-4-使用-SSH-连接"><a href="#2-4-使用-SSH-连接" class="headerlink" title="2.4 使用 SSH 连接"></a>2.4 使用 SSH 连接</h2><p>重启后就可以使用 ssh 连接路由器了。</p><p><img src="/82817d9487c7/image-20230226141820774.png" alt="image-20230226141820774"></p><p>登录后界面</p><p><img src="/82817d9487c7/image-20230226143529976.png" alt="image-20230226143529976"></p><h1 id="三、刷入-UBoot-固件"><a href="#三、刷入-UBoot-固件" class="headerlink" title="三、刷入 UBoot 固件"></a>三、刷入 UBoot 固件</h1><h2 id="3-1-备份路由器分区"><a href="#3-1-备份路由器分区" class="headerlink" title="3.1 备份路由器分区"></a>3.1 备份路由器分区</h2><p>执行命令将分区备份到 &#x2F;tmp 目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd1 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/mtd1_BL2.bin<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd2 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/mtd2_Nvram.bin<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd3 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/mtd3_Bdata.bin<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd4 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/mtd4_Factory.bin<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/mtd5 <span class="token assign-left variable">of</span><span class="token operator">=</span>/tmp/mtd5_FIP.bin</code></pre><p>在 windows 上使用 scp 命令将这些文件下载至本地保存备份。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> root@192.168.31.1:/tmp/mtd*.bin ./</code></pre><h2 id="3-2-刷入-UBoot-系统"><a href="#3-2-刷入-UBoot-系统" class="headerlink" title="3.2 刷入 UBoot 系统"></a>3.2 刷入 UBoot 系统</h2><p>上传 uboot 文件<code>mt7986_redmi_ax6000-fip-fixed-parts.bin</code>上传至 &#x2F;tmp 目录中</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> .<span class="token punctuation">\</span>mt7986_redmi_ax6000-fip-fixed-parts.bin root@192.168.31.1:/tmp</code></pre><p>使用 md5 校验是否同一个文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@XiaoQiang:/tmp<span class="token comment"># md5sum mt7986_redmi_ax6000-fip-fixed-parts.bin </span>7610a1722073748c3c3a860b75d94d5d  mt7986_redmi_ax6000-fip-fixed-parts.bin</code></pre><p>依次输入以下命令，擦除分区并写入 uboot 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash">mtd erase FIPmtd <span class="token function">write</span> /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIPmtd verify /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP</code></pre><p>命令执行结果如下，提示 Success 表示写入成功。</p><pre class="language-bash" data-language="bash"><code class="language-bash">root@XiaoQiang:/tmp<span class="token comment"># mtd erase FIP</span>Unlocking FIP <span class="token punctuation">..</span>.Erasing FIP <span class="token punctuation">..</span>.root@XiaoQiang:/tmp<span class="token comment"># mtd write /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP</span>Unlocking FIP <span class="token punctuation">..</span>.Writing from /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin to FIP <span class="token punctuation">..</span>.     root@XiaoQiang:/tmp<span class="token comment"># mtd verify /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP</span>Verifying FIP against /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin <span class="token punctuation">..</span>.72a110768c7473200b863a3c5d4dd975 - FIP72a110768c7473200b863a3c5d4dd975 - /tmp/mt7986_redmi_ax6000-fip-fixed-parts.binSuccess</code></pre><h2 id="3-3-手动初始化路由器"><a href="#3-3-手动初始化路由器" class="headerlink" title="3.3 手动初始化路由器"></a>3.3 手动初始化路由器</h2><p>手动设置电脑 IP 地址为：</p><ul><li><p>IP 地址：192.168.31.2</p></li><li><p>子网掩码：255.255.255.0</p></li><li><p>网关地址：192.168.31.1</p></li><li><p>DNS：8.8.8.8</p></li></ul><p>随后用网线连接电脑至路由器的 2、3、4 任意一个 LAN 口，并使用卡针插入路由器初始化 Reset 孔时同时接入电源。按住持续大概十几秒钟，松开卡针，路由器初始化成功。（路由器并不会灯光提示，心里默数15秒即可）</p><p>随后访问：<a href="http://192.168.31.1/%EF%BC%8C%E6%98%BE%E7%A4%BA">http://192.168.31.1/，显示</a> UBoot 系统。</p><p><img src="/82817d9487c7/image-20230226165150688.png" alt="image-20230226165150688"></p><h1 id="四、刷入-OpenWrt-系统"><a href="#四、刷入-OpenWrt-系统" class="headerlink" title="四、刷入 OpenWrt 系统"></a>四、刷入 OpenWrt 系统</h1><p>进入 UBoot 系统页面后，上传 OpenWrt 系统固件 <code>ax6000-full.bin</code>，选择固件文件，点击 Upload。</p><p><img src="/82817d9487c7/image-20230226170818190.png" alt="image-20230226170818190"></p><p>点击 Update</p><p><img src="/82817d9487c7/image-20230226170947083.png" alt="image-20230226170947083"></p><p>等待更新</p><p><img src="/82817d9487c7/image-20230226171006005.png" alt="image-20230226171006005"></p><p>更新成功，等待重启（这里等待个三四分钟即可。因为页面会一直卡在这里，是由于 OpenWrt 系统的默认 IP 是 192.168.6.1，重启成功后也并不会通知你，因为你现在还在 31 网段。。。）</p><p><img src="/82817d9487c7/image-20230226171602762.png" alt="image-20230226171602762"></p><p>这时将自己电脑 IP 设置成 DHCP 自动获取，或者改为 192.168.6.x 网段。访问：<a href="http://192.168.6.1/">http://192.168.6.1/</a> 页面。用户名密码分别是：root&#x2F;password</p><p><img src="/82817d9487c7/image-20230226172123743.png" alt="image-20230226172123743"></p><p>进入系统，查看详情</p><p><img src="/82817d9487c7/image-20230226172301156.png" alt="image-20230226172301156"></p><h1 id="五、开启-WIFI-功能"><a href="#五、开启-WIFI-功能" class="headerlink" title="五、开启 WIFI 功能"></a>五、开启 WIFI 功能</h1><h2 id="5-1-禁用-2-4-G-频段"><a href="#5-1-禁用-2-4-G-频段" class="headerlink" title="5.1 禁用 2.4 G 频段"></a>5.1 禁用 2.4 G 频段</h2><p>进入网络 → 无线 可以看到默认配置了两个无线频段，用不到的话可以将 2.4 G 频段的 AP 禁用，点击后面的禁用。</p><p><img src="/82817d9487c7/image-20230226172820416.png" alt="image-20230226172820416"></p><p><img src="/82817d9487c7/image-20230226173228342.png" alt="image-20230226173228342"></p><h2 id="5-2-修改-WIFI-名称与密码"><a href="#5-2-修改-WIFI-名称与密码" class="headerlink" title="5.2 修改 WIFI 名称与密码"></a>5.2 修改 WIFI 名称与密码</h2><p>配置 5G 频段的 WIFI，点击配置，进入无线配置页面。</p><ul><li><p>SSID：自定义 WIFI 的名称</p></li><li><p>认证模式：WPA2PSKWPA3PSK</p></li><li><p>加密方式：AES</p></li><li><p>密码：自定义 WIFI 密码</p></li><li><p>启用节能模式(APSD)：Disable</p></li></ul><p>其他默认即可，保存&amp;应用。</p>]]></content>
      
      
      <categories>
          
          <category> OpenWrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 内核升级</title>
      <link href="/57923a9b4b82/"/>
      <url>/57923a9b4b82/</url>
      
        <content type="html"><![CDATA[<p>CentOS 7 系统默认内核版本很低，由于现在很多软件特性需要更高版本的内核才能运行，所以将内核升级步骤记录一下。</p><!--- more --><p>查看当前系统内核版本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment"># uname -r</span><span class="token number">3.10</span>.0-1160.el7.x86_64</code></pre><p>升级到最新稳定版本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导入 ELRepo 仓库的公共密钥</span><span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<span class="token comment"># 安装 ELRepo 仓库的 yum 源</span><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm<span class="token comment"># kernel-ml 中的 ml 是英文【mainline stable】的缩写，是最新的稳定主线版本。</span><span class="token comment"># kernel-lt 中的 lt 是英文【long term support】的缩写，是长期支持版本。</span>yum <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span>elrepo-kernel <span class="token function">install</span> kernel-ml</code></pre><p>查看系统启动 grub2 中配置的内核</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">awk</span> -F<span class="token punctuation">\</span>' <span class="token string">'$1=="menuentry " &#123;print i++ " : " $2&#125;'</span> /etc/grub2.cfg<span class="token number">0</span> <span class="token builtin class-name">:</span> CentOS Linux <span class="token punctuation">(</span><span class="token number">5.4</span>.185-1.el7.elrepo.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token number">1</span> <span class="token builtin class-name">:</span> CentOS Linux <span class="token punctuation">(</span><span class="token number">3.10</span>.0-1160.el7.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token number">2</span> <span class="token builtin class-name">:</span> CentOS Linux <span class="token punctuation">(</span><span class="token number">0</span>-rescue-a42673ea48f7428ea57f90dd97d54ef9<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token comment"># 设置默认内核为 0</span>grub2-set-default <span class="token number">0</span><span class="token comment"># 重新创建内核配置</span>grub2-mkconfig <span class="token parameter variable">-o</span> /boot/grub2/grub.cfg</code></pre><p><code>reboot</code>重启后生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment"># uname -r</span><span class="token number">5.18</span>.5-1.el7.elrepo.x86_64</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内核升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray 科学上网搭建流程</title>
      <link href="/3a46cef73ec8/"/>
      <url>/3a46cef73ec8/</url>
      
        <content type="html"><![CDATA[<p>科学上网（fanqiang）的大体原理都是通过一台在防火墙之外的 VPS 作为媒介，实现国内网络和防火墙之外的网络之间的互通，因此一台不受防火墙骚扰的 VPS 是必备的。而 v2ray 负责的是你的网络和 VPS 之间的网络通信功能。借助 V2ray 你可以实现透过防火墙，自由穿梭于网络。你需要做的是分别在你的设备（手机、PC 等）和 VPS 上分别部署一下 v2ray。</p><span id="more"></span><p><img src="/3a46cef73ec8/image-20230222160049399.png" alt="image-20230222160049399"></p><h1 id="一、购买-VPS"><a href="#一、购买-VPS" class="headerlink" title="一、购买 VPS"></a>一、购买 VPS</h1><h2 id="1-1-搬瓦工-VPS-购买"><a href="#1-1-搬瓦工-VPS-购买" class="headerlink" title="1.1 搬瓦工 VPS 购买"></a>1.1 搬瓦工 VPS 购买</h2><p>我这里推荐的是搬瓦工平台：<a href="https://www.bandwagonhost.net/%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E5%AE%8C%E6%95%B4%E7%9A%84%E8%B4%AD%E4%B9%B0%E6%95%99%E7%A8%8B%EF%BC%8C%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%9D%E5%BB%BA%E8%AE%AE">https://www.bandwagonhost.net/，里面有完整的购买教程，个人使用的话建议</a> CN2 入门级即可。</p><p><img src="/3a46cef73ec8/image-20230222162941672.png" alt="image-20230222162941672"></p><h2 id="1-2-远程连接-VPS"><a href="#1-2-远程连接-VPS" class="headerlink" title="1.2 远程连接 VPS"></a>1.2 远程连接 VPS</h2><p>购买完之后进入服务界面：<a href="https://bwh81.net/services%EF%BC%8C%E5%88%9A%E5%88%9A%E8%B4%AD%E4%B9%B0%E7%9A%84">https://bwh81.net/services，刚刚购买的</a> VPS 已经在列表里了。包含机房地址，公网 IP 地址，创建日期，到期日期。点击小齿轮，选择 Open KiwiVM 进入 VPS 设置界面。</p><ul><li>Main controls</li></ul><p>该界面包含了 VPS 的大部分信息，需要我们关注的有公网 IP、SSH 端口、操作系统。操作系统我使用的是 centOS-7-x86_64-Minimal-1810.iso 这个镜像。</p><ul><li>Root password modification</li></ul><p>该菜单可以生成一串 ROOT 密码，点击 <code>Generate and set new root password</code> 按钮，生成一串密码，保存该密码。</p><ul><li>Root shell - basic</li></ul><p>这个界面下可以以 Root 管理员身份输入命令，可以查看防火墙是否关闭，SSH 服务是否开启。</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl status firewalldsystemctl status sshd</code></pre><p>获取到公网 IP、SSH 端口、管理员密码后，可以使用终端工具如 Xshell 远程管理我们的 VPS 了。</p><h1 id="二、安装-V2Ray-服务端"><a href="#二、安装-V2Ray-服务端" class="headerlink" title="二、安装 V2Ray 服务端"></a>二、安装 V2Ray 服务端</h1><h2 id="2-1-系统内核升级"><a href="#2-1-系统内核升级" class="headerlink" title="2.1 系统内核升级"></a>2.1 系统内核升级</h2><p>具体操作：<a href="https://blog.liuli.host/57923a9b4b82/">CentOS 7 内核升级</a></p><h2 id="2-2-服务端安装"><a href="#2-2-服务端安装" class="headerlink" title="2.2 服务端安装"></a>2.2 服务端安装</h2><p>这里使用开发者提供的一件安装脚本安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh<span class="token punctuation">)</span></code></pre><p>卸载脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh<span class="token punctuation">)</span> <span class="token parameter variable">--remove</span></code></pre><h2 id="2-3-配置文件更改"><a href="#2-3-配置文件更改" class="headerlink" title="2.3 配置文件更改"></a>2.3 配置文件更改</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/etc/v2ray/config.json</code></pre><p>配置文件内容如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"log"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"access"</span><span class="token operator">:</span> <span class="token string">"/var/log/v2ray/access.log"</span><span class="token punctuation">,</span>        <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"/var/log/v2ray/error.log"</span><span class="token punctuation">,</span>        <span class="token property">"loglevel"</span><span class="token operator">:</span> <span class="token string">"warning"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"inbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">11055</span><span class="token punctuation">,</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"vmess"</span><span class="token punctuation">,</span>            <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"clients"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"e364c132-b496-4d51-abdd-a2f4e52f03a5"</span><span class="token punctuation">,</span>                        <span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                        <span class="token property">"alterId"</span><span class="token operator">:</span> <span class="token number">0</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"streamSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"network"</span><span class="token operator">:</span> <span class="token string">"ws"</span><span class="token punctuation">,</span>                <span class="token property">"wsSettings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/tech"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outbounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token property">"protocol"</span><span class="token operator">:</span> <span class="token string">"freedom"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-4-启动服务端"><a href="#2-4-启动服务端" class="headerlink" title="2.4 启动服务端"></a>2.4 启动服务端</h2><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start v2ray <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> v2ray</code></pre><p>查看 11055 端口是否启用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@great-wall-1 ~<span class="token punctuation">]</span><span class="token comment"># netstat -anpt | grep 11055</span>tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::11055                :::*                    LISTEN      <span class="token number">3463</span>/v2ray   </code></pre><h2 id="2-5-使用-Nginx-代理"><a href="#2-5-使用-Nginx-代理" class="headerlink" title="2.5 使用 Nginx 代理"></a>2.5 使用 Nginx 代理</h2><p>可以使用 Nginx 代理域名的方式访问后端 v2ray 服务，这样客户端配置更方便。<a href="https://help.aliyun.com/document_detail/29725.html">域名解析文档</a>与<a href="https://help.aliyun.com/document_detail/28546.html">免费 SSL 证书获取文档</a>。</p><ul><li>Nginx 安装命令</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpmyum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginxsystemctl start nginx.servicesystemctl <span class="token builtin class-name">enable</span> nginx.service</code></pre><ul><li>Nginx 配置文件，增加一个 server 段</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/nginx.conf</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">&#123;</span><span class="token comment"># 监听端口，后面客户端连接需要使用</span>        listen       <span class="token number">1010</span> ssl http2<span class="token punctuation">;</span><span class="token comment"># 解析至该服务器的域名</span>        server_name  ss.xxx.com<span class="token punctuation">;</span>        root         /usr/share/nginx/html<span class="token punctuation">;</span><span class="token comment"># 域名 SSL 证书，可去公有云厂商免费申请一年的</span>        ssl_certificate <span class="token string">"8974354_ss.liuli.host.pem"</span><span class="token punctuation">;</span>        ssl_certificate_key <span class="token string">"8974354_ss.liuli.host.key"</span><span class="token punctuation">;</span>        ssl_session_cache shared:SSL:1m<span class="token punctuation">;</span>        ssl_session_timeout  10m<span class="token punctuation">;</span>        ssl_ciphers HIGH:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers on<span class="token punctuation">;</span><span class="token comment"># 请求转发的路径</span>    location /tech <span class="token punctuation">&#123;</span>        proxy_redirect off<span class="token punctuation">;</span>        proxy_pass http://127.0.0.1:11055<span class="token punctuation">;</span>        proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>        proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><ul><li>启动 Nginx 服务</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start nginx <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> nginx</code></pre><h1 id="三、安装-V2Ray-客户端"><a href="#三、安装-V2Ray-客户端" class="headerlink" title="三、安装 V2Ray 客户端"></a>三、安装 V2Ray 客户端</h1><h2 id="3-1-下载地址"><a href="#3-1-下载地址" class="headerlink" title="3.1 下载地址"></a>3.1 下载地址</h2><p>链接：<a href="https://pan.baidu.com/s/1OcAopVmV2UU5d1Btkw2C-A?pwd=9ybc">https://pan.baidu.com/s/1OcAopVmV2UU5d1Btkw2C-A?pwd=9ybc</a><br>提取码：9ybc</p><h2 id="3-2-PC-客户端配置"><a href="#3-2-PC-客户端配置" class="headerlink" title="3.2 PC 客户端配置"></a>3.2 PC 客户端配置</h2><p>打开软件，选择服务器 → 添加 Vmess 服务器，配置如下。</p><p><img src="/3a46cef73ec8/image-20230222174239507.png" alt="image-20230222174239507"></p><p>开启服务方法：</p><ul><li>系统代理 → 自动配置系统代理</li><li>路由 → 绕过大陆</li></ul><h2 id="3-3-手机客户端配置"><a href="#3-3-手机客户端配置" class="headerlink" title="3.3 手机客户端配置"></a>3.3 手机客户端配置</h2><p>电脑配置没问题后，可以分享连接在手机端打开，可直接配置成功，简单又轻松。</p><h1 id="四、Google-BBR-开启加速"><a href="#四、Google-BBR-开启加速" class="headerlink" title="四、Google BBR 开启加速"></a>四、Google BBR 开启加速</h1><p>BBR 开启后可显着提高服务器的吞吐量并减少连接延迟。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'net.core.default_qdisc=fq'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf<span class="token builtin class-name">echo</span> <span class="token string">'net.ipv4.tcp_congestion_control=bbr'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf<span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span></code></pre><p>验证</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@great-wall-1 ~<span class="token punctuation">]</span><span class="token comment"># sudo sysctl net.ipv4.tcp_available_congestion_control</span>net.ipv4.tcp_available_congestion_control <span class="token operator">=</span> bbr cubic reno<span class="token punctuation">[</span>root@great-wall-1 ~<span class="token punctuation">]</span><span class="token comment"># sudo sysctl -n net.ipv4.tcp_congestion_control</span>bbr<span class="token punctuation">[</span>root@great-wall-1 ~<span class="token punctuation">]</span><span class="token comment"># lsmod | grep bbr</span>tcp_bbr                <span class="token number">16384</span>  <span class="token number">30</span> </code></pre><h1 id="五、context-deadline-exceeded-问题"><a href="#五、context-deadline-exceeded-问题" class="headerlink" title="五、context deadline exceeded 问题"></a>五、context deadline exceeded 问题</h1><p>这个错误提示表示连不上服务端了，有可能是该端口被封，可更换服务端 Nginx 端口解决该问题。</p><pre class="language-BASH" data-language="BASH"><code class="language-BASH">listen       1010 ssl http2; # 更改此处的端口号</code></pre><p>更该端口后重启 Nginx 服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart nginx</code></pre><p>客户端也别忘了更改连接端口。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收藏</title>
      <link href="/9435eeec3ab0/"/>
      <url>/9435eeec3ab0/</url>
      
        <content type="html"><![CDATA[<p>个人收藏的一些网站</p><span id="more"></span><h1 id="有趣网站"><a href="#有趣网站" class="headerlink" title="有趣网站"></a>有趣网站</h1><table><thead><tr><th>名称</th><th>网址</th><th>说明</th></tr></thead><tbody><tr><td>私人海岛贩卖</td><td><a href="https://www.privateislandsonline.com/">https://www.privateislandsonline.com/</a></td><td>该网站在售一些私人海岛</td></tr><tr><td>壁纸网站</td><td><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></td><td>国外的壁纸网站，欧美系壁纸爱好者福音</td></tr><tr><td>泄漏事件查询</td><td><a href="https://monitor.firefox.com/">https://monitor.firefox.com/</a></td><td>查询自己的个人信息是否泄漏</td></tr><tr><td>小霸王在线游戏</td><td><a href="https://www.yikm.net/">https://www.yikm.net/</a></td><td>小霸王，其乐无穷。红白机，FC 游戏，街机游戏，</td></tr><tr><td>鸡鸡图片生成器</td><td><a href="https://seoi.net/penint/">https://seoi.net/penint/</a></td><td>你画的任何图形都会转换成鸡鸡</td></tr><tr><td>影视大全</td><td><a href="https://rargb.to/">https://rargb.to/</a></td><td>国外蓝光电影大全（不只是电影）</td></tr><tr><td>16 型人格测试</td><td><a href="https://www.16personalities.com/ch">https://www.16personalities.com/ch</a></td><td>“神准”的性格测试，快来测测你是哪种性格</td></tr></tbody></table><h1 id="AI-工具"><a href="#AI-工具" class="headerlink" title="AI 工具"></a>AI 工具</h1><table><thead><tr><th>名称</th><th>网址</th><th>说明</th></tr></thead><tbody><tr><td>Vega AI 创作平台</td><td><a href="https://rightbrain.art/text2Image">https://rightbrain.art/text2Image</a></td><td>根据你提供的文字描述生成图片</td></tr><tr><td>AI 周报生成器</td><td><a href="https://chat35.com/report">https://chat35.com/report</a></td><td>输入工作内容，AI 帮你生成周报</td></tr><tr><td>AI 人像照片修复</td><td><a href="https://www.restorephotos.io/">https://www.restorephotos.io/</a></td><td>修复老年机画质的照片</td></tr><tr><td>自动生成字幕</td><td><a href="https://github.com/openai/whisper">https://github.com/openai/whisper</a></td><td>自动生成视频字幕</td></tr><tr><td>AI 辅助决策</td><td><a href="https://rationale.jinaai.cn/">https://rationale.jinaai.cn/</a></td><td>说出你的顾虑，让AI帮你解析</td></tr></tbody></table><h1 id="下载库"><a href="#下载库" class="headerlink" title="下载库"></a>下载库</h1><table><thead><tr><th>名称</th><th>网址</th><th>说明</th></tr></thead><tbody><tr><td>系统镜像下载</td><td><a href="http://msdn.itellyou.cn/">http://msdn.itellyou.cn</a></td><td>纯净系统镜像下载，良心网站</td></tr><tr><td>Linux 依赖包下载</td><td><a href="https://pkgs.org/">https://pkgs.org/</a></td><td>最全的 Linux 系统依赖包下载网站</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h1><table><thead><tr><th>名称</th><th>网址</th><th>说明</th></tr></thead><tbody><tr><td>Git 命令学习</td><td><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></td><td>目前为止最好的 Git 命令教程了</td></tr><tr><td>爱资料在线工具箱</td><td><a href="https://www.toolnb.com/">https://www.toolnb.com/</a></td><td>常用小工具集合网站</td></tr><tr><td>命令行终端录屏</td><td><a href="https://asciinema.org/">https://asciinema.org/</a></td><td>将你所敲的命令行录屏下来</td></tr><tr><td>MirrorZ Help</td><td><a href="https://mirrors.help/">https://mirrors.help/</a></td><td>开源、开放、且持续更新的开源软件镜像站点</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 网站收藏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭配 Github Page 搭建个人博客</title>
      <link href="/9d7397c37e98/"/>
      <url>/9d7397c37e98/</url>
      
        <content type="html"><![CDATA[<p>由于工作需要，一直会有写笔记的需求。尝试过购买服务器自建 WordPress 写文章，但由于服务器需要自己维护，太浪费金钱与精力。为了满足记笔记的需求，找到了 Github Page + Hexo 的方案，无需运维，搭建简单，可以轻松满足个人博客的需求。本文为记录整个方案的搭建过程。</p><span id="more"></span><h1 id="一、资源准备"><a href="#一、资源准备" class="headerlink" title="一、资源准备"></a>一、资源准备</h1><p>GitHub Pages 文档：<a href="https://docs.github.com/zh/pages">https://docs.github.com/zh/pages</a></p><p>Hexo 文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>Next 主题文档：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a></p><p>由于将博客网站托管在 Github 上的，所以需要有一个账号，注册地址：<a href="https://github.com/">https://github.com/</a></p><table><thead><tr><th>资源</th><th>版本</th><th>地址</th><th>说明</th></tr></thead><tbody><tr><td>Git</td><td>2.38.1.windows.1</td><td><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></td><td>后续文章发布需要使用 git 工具</td></tr><tr><td>Node.js</td><td>18.14.0</td><td><a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></td><td>hexo 的运行环境，推荐下载长期维护版</td></tr></tbody></table><p>Git 与 Node.js 我这里使用的都是 Windows 版本，下载后直接安装向导安装即可。输入以下命令查看安装的版本：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># Git 版本</span>> git versiongit version 2<span class="token punctuation">.</span>38<span class="token punctuation">.</span>1<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>1<span class="token comment"># Node.js 版本</span>> node <span class="token operator">-</span>vv18<span class="token punctuation">.</span>14<span class="token punctuation">.</span>0> npm <span class="token operator">-</span>v9<span class="token punctuation">.</span>3<span class="token punctuation">.</span>1</code></pre><h1 id="二、安装-Hexo"><a href="#二、安装-Hexo" class="headerlink" title="二、安装 Hexo"></a>二、安装 Hexo</h1><p>在本地新建一个文件夹作为本地仓库，名称自定义。在文件夹内打开终端命令行，输入以下命令：</p><ul><li>配置 npm 国内源</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm config <span class="token function">set</span> registry <span class="token string">"https://registry.npm.taobao.org"</span></code></pre><ul><li>安装 hexo 命令客户端</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">-</span>g hexo-<span class="token function">cli</span></code></pre><ul><li>初始化 hexo，生成 hexo 文件</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo init</code></pre><ul><li>安装依赖</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">npm install</code></pre><p>生成以下文件夹表示安装完成</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">Mode                 LastWriteTime         Length Name<span class="token operator">--</span><span class="token operator">--</span>                 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                <span class="token punctuation">.</span>githubd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:02                node_modulesd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                scaffolds <span class="token comment"># 模版文件夹。当新建文章时，会根据 scaffold 来建立文件。</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                source <span class="token comment"># 资源文件夹，用来存放资源的地方。</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     20:57                themes <span class="token comment"># 主题文件夹，Hexo 会根据主题来生成静态页面。</span><span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     20:57             89 <span class="token punctuation">.</span>gitignore<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:02          19716 db<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:02          89504 package-lock<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:00            619 package<span class="token punctuation">.</span>json <span class="token comment"># hexo 应用程序的信息，里面有版本与依赖。</span><span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     20:57              0 _config<span class="token punctuation">.</span>landscape<span class="token punctuation">.</span>yml<span class="token comment"># 自带的 landscape 主题配置文件。</span><span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     20:57           2546 _config<span class="token punctuation">.</span>yml <span class="token comment"># 网站的主配置信息，可以在此配置大部分的参数。</span></code></pre><p>服务启动命令，访问  <a href="http://localhost:4000/%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E3%80%82">http://localhost:4000/，查看博客主页。</a></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo s</code></pre><p><img src="/9d7397c37e98/image-20230220211258981.png" alt="image-20230220211258981"></p><h1 id="三、安装-Next-主题"><a href="#三、安装-Next-主题" class="headerlink" title="三、安装 Next 主题"></a>三、安装 Next 主题</h1><p>由于自带的默认主题太丑了，所以就有很多基于 hexo 框架的主题模板被开发出来，我个人比较喜欢 Next 这款主题，接下来就安装该主题。</p><ul><li>使用 git 直接安装最新版本的主题</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/next-theme/hexo-theme-next themes/next</code></pre><ul><li>安装完后，会在 themes 目录中产生 next 目录，里面是该主题的相关文件。</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">> <span class="token function">ls</span> themes\nextMode                 LastWriteTime         Length Name<span class="token operator">--</span><span class="token operator">--</span>                 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">--</span><span class="token operator">--</span>d-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                <span class="token punctuation">.</span>githooksd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                <span class="token punctuation">.</span>githubd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                docsd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                languagesd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                layoutd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                scriptsd-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                sourced-<span class="token operator">--</span><span class="token operator">--</span>         2023/2/20     21:25                test<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            178 <span class="token punctuation">.</span>editorconfig<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25             51 <span class="token punctuation">.</span>eslintrc<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25             26 <span class="token punctuation">.</span>gitattributes<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            113 <span class="token punctuation">.</span>gitignore<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            602 <span class="token punctuation">.</span>stylelintrc<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25            241 crowdin<span class="token punctuation">.</span>yml<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           3014 LICENSE<span class="token punctuation">.</span>md<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           1199 package<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           8911 README<span class="token punctuation">.</span>md<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25             46 renovate<span class="token punctuation">.</span>json<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25          30273 _config<span class="token punctuation">.</span>yml<span class="token operator">-</span>a-<span class="token operator">--</span><span class="token operator">-</span>         2023/2/20     21:25           5040 _vendors<span class="token punctuation">.</span>yml</code></pre><ul><li>安装完成后，在 Hexo 配置文件中将 <code>theme</code> 设置为 <code>next</code>。</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> next</code></pre><ul><li>再次启动 hexo 查看安装后的效果</li></ul><pre class="language-powershell" data-language="powershell"><code class="language-powershell">hexo s</code></pre><p><img src="/9d7397c37e98/image-20230220213401476.png" alt="image-20230220213401476"></p><h1 id="四、编写文章"><a href="#四、编写文章" class="headerlink" title="四、编写文章"></a>四、编写文章</h1><p>编写文章分为三步，创建文章、编写文章、生成静态文件</p><h2 id="4-1-创建文章"><a href="#4-1-创建文章" class="headerlink" title="4.1 创建文章"></a>4.1 创建文章</h2><p>在终端使用命令创建一个新文章，格式 <code>hexo new [layout] title</code>，layout 不指定则默认是 post 类型，这里创建一个标题为”测试页面”的文章。</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"测试页面"</span></code></pre><p>查看 <code>source\_posts</code> 目录中，生成”测试页面.md”文件</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">source\_posts\测试页面<span class="token punctuation">.</span>md</code></pre><h2 id="4-2-编写文章"><a href="#4-2-编写文章" class="headerlink" title="4.2 编写文章"></a>4.2 编写文章</h2><p>这里由于生成的是 markdown 文件，这里需要懂一些基础的语法，并且推荐 typora 编辑工具。</p><p><img src="/9d7397c37e98/image-20230220215352672.png" alt="image-20230220215352672"></p><h2 id="4-3-生成静态文件"><a href="#4-3-生成静态文件" class="headerlink" title="4.3 生成静态文件"></a>4.3 生成静态文件</h2><p>编写完笔记后，就可以用命令生成静态页面了</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g hexo s</code></pre><p><img src="/9d7397c37e98/image-20230220215426978.png" alt="image-20230220215426978"></p><h1 id="五、部署至-GitHub"><a href="#五、部署至-GitHub" class="headerlink" title="五、部署至 GitHub"></a>五、部署至 GitHub</h1><h2 id="5-1-创建-GitHub-Pages"><a href="#5-1-创建-GitHub-Pages" class="headerlink" title="5.1 创建 GitHub Pages"></a>5.1 创建 GitHub Pages</h2><p>首先打开自己的 GitHub，创建一个 <code>你的帐号名.github.io</code> 的 Public 仓库，例如 <code>liuli404/github.io</code>。然后进入到该仓库的 Settings → Pages 页面，就可以看到访问地址了，一般是 <a href="https://username.github.io/">https://username.github.io</a> 格式的地址。</p><h2 id="5-2-创建-SSH-Key"><a href="#5-2-创建-SSH-Key" class="headerlink" title="5.2 创建 SSH Key"></a>5.2 创建 SSH Key</h2><p>由于文章都是在本地编写生成，想要发布到个人仓库就需要 git 等一系列命令，为了简化部署流程，可以在本地生成密钥，以密钥的方式发布至 GitHub。一直按回车确定即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"GitHub 的注册邮箱"</span></code></pre><h2 id="5-3-添加公钥到-GitHub"><a href="#5-3-添加公钥到-GitHub" class="headerlink" title="5.3 添加公钥到 GitHub"></a>5.3 添加公钥到 GitHub</h2><p>打开个人用户文件夹，里面已经生成一个”.ssh”文件夹，里面有刚刚生成的两个 ssh 密钥文件。</p><ul><li>id_rsa：是本机的私人秘钥</li><li>id_rsa.pub：是公共秘钥，复制该密钥的内容。</li></ul><p>打开你的 GitHub 网页页面，点击用户头像→Settings→SSH and GPG keys→New SSH key→将复制的内容粘贴到 Key 文本框中，标题随意，仅作自己区分用。然后点击 Add SSH key （添加 SSH）按钮。</p><p><img src="/9d7397c37e98/image-20230220232315645.png" alt="image-20230220232315645"></p><h2 id="5-4-检查免密登录"><a href="#5-4-检查免密登录" class="headerlink" title="5.4 检查免密登录"></a>5.4 检查免密登录</h2><p>在本地终端输入命令，查看到自己的 GitHub 用户名，表示免密认证通过。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.comHi liuli404<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre><h2 id="5-5-修改部署配置"><a href="#5-5-修改部署配置" class="headerlink" title="5.5 修改部署配置"></a>5.5 修改部署配置</h2><p>打开 hexo 的主配置文件 _config.yaml，在最下面找到 deploy 配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token string">'git@github.com:liuli404/liuli404.github.io.git'</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> <span class="token string">'main'</span></code></pre><h2 id="5-6-部署至-GItHub-Pages"><a href="#5-6-部署至-GItHub-Pages" class="headerlink" title="5.6 部署至 GItHub Pages"></a>5.6 部署至 GItHub Pages</h2><ul><li>部署之前安装 deploy-git 插件</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git</code></pre><ul><li>部署命令</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><p>当执行<code>hexo deploy</code>时，Hexo 会将<code>public</code>目录中的文件和目录推送至<code>_config.yml</code>中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><h1 id="六、自定义域名"><a href="#六、自定义域名" class="headerlink" title="六、自定义域名"></a>六、自定义域名</h1><h2 id="6-1-配置自定义域名"><a href="#6-1-配置自定义域名" class="headerlink" title="6.1 配置自定义域名"></a>6.1 配置自定义域名</h2><p>GitHub Pages 除了使用默认的域名访问，还支持自定义域名。需要将域名的 DNS 使用 CNAME 方式解析到对应的仓库地址，例如将 <code>blog.liuli.host</code> → <code>liuli404.github.io</code></p><p>然后打开仓库，进入 Settings → Pages 在 Custom domain 中填入你的自定义域名。</p><p><img src="/9d7397c37e98/image-20230220234039209.png" alt="image-20230220234039209"></p><h2 id="6-2-开启强制-HTTPS-访问"><a href="#6-2-开启强制-HTTPS-访问" class="headerlink" title="6.2 开启强制 HTTPS 访问"></a>6.2 开启强制 HTTPS 访问</h2><p>等待自定义域名的 DNS 检查通过，就可以开启强制 HTTPS 访问功能了，如下：</p><p><img src="/9d7397c37e98/image-20230220234129912.png" alt="image-20230220234129912"></p><h2 id="6-3-CNAME-被覆盖问题"><a href="#6-3-CNAME-被覆盖问题" class="headerlink" title="6.3 CNAME 被覆盖问题"></a>6.3 CNAME 被覆盖问题</h2><p>由于生成的 CNAME 在根目录，每次 deploy 都会被覆盖掉该文件，导致自定义域名无法访问博客，所以我们可以将 CNAME 文件放入本地 Hexo 中的 source 目录中，source 目录中的内容不会被 clean 指令删除，这样即使重新 deploy 也不影响 CNAME 的域名解析功能。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用服务快速安装</title>
      <link href="/611e19b2dbc6/"/>
      <url>/611e19b2dbc6/</url>
      
        <content type="html"><![CDATA[<p>运维工作工常用的一些快速安装脚本集合</p><span id="more"></span><h1 id="一、服务器环境初始化"><a href="#一、服务器环境初始化" class="headerlink" title="一、服务器环境初始化"></a>一、服务器环境初始化</h1><h2 id="1-1-设置主机名"><a href="#1-1-设置主机名" class="headerlink" title="1.1 设置主机名"></a>1.1 设置主机名</h2><pre class="language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname <span class="token operator">&lt;</span>hostname<span class="token operator">></span></code></pre><h2 id="1-2-关闭-Firewalld-与-Selinux"><a href="#1-2-关闭-Firewalld-与-Selinux" class="headerlink" title="1.2 关闭 Firewalld 与 Selinux"></a>1.2 关闭 Firewalld 与 Selinux</h2><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service <span class="token operator">&amp;&amp;</span> systemctl disable firewalld.servicesetenforce <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/enforcing/disabled/g'</span> /etc/selinux/config</code></pre><h2 id="1-3-NTP-时间同步"><a href="#1-3-NTP-时间同步" class="headerlink" title="1.3 NTP 时间同步"></a>1.3 NTP 时间同步</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> ntp<span class="token function">cat</span> <span class="token operator">></span> /etc/ntp.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFdriftfile /var/lib/ntp/driftrestrict default nomodify notrap nopeer noqueryrestrict 127.0.0.1 restrict ::1server 0.cn.pool.ntp.orgserver 1.cn.pool.ntp.orgserver 2.cn.pool.ntp.orgserver 3.cn.pool.ntp.orgincludefile /etc/ntp/crypto/pwkeys /etc/ntp/keysdisable monitorEOF</span>systemctl stop chronyd <span class="token operator">&amp;&amp;</span> systemctl disable chronydsystemctl start ntpd <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> ntpdntpdate <span class="token parameter variable">-u</span> <span class="token number">0</span>.cn.pool.ntp.orghwclock <span class="token parameter variable">--systohc</span><span class="token builtin class-name">echo</span> <span class="token string">'0 * * * * /usr/sbin/ntpdate -u 0.cn.pool.ntp.org >> /tmp/autontpdate 2>&amp;1'</span>  <span class="token operator">>></span> /var/spool/cron/root</code></pre><h2 id="1-4-Bash-命令补齐"><a href="#1-4-Bash-命令补齐" class="headerlink" title="1.4 Bash 命令补齐"></a>1.4 Bash 命令补齐</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> bash-completion<span class="token builtin class-name">source</span> /usr/share/bash-completion/bash_completion</code></pre><h2 id="1-5-最大文件数与进程数"><a href="#1-5-最大文件数与进程数" class="headerlink" title="1.5 最大文件数与进程数"></a>1.5 最大文件数与进程数</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开文件数</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/security/limits.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOF* soft nofile 102400* hard nofile 204800EOF</span><span class="token comment"># 最大进程数</span><span class="token function">cat</span> <span class="token operator">></span> /etc/security/limits.d/20-nproc.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOF* soft nproc 102400* hard nproc 204800EOF</span></code></pre><h2 id="1-6-历史命令设置"><a href="#1-6-历史命令设置" class="headerlink" title="1.6 历史命令设置"></a>1.6 历史命令设置</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> <span class="token string">"HISTTIMEFORMAT"</span> /etc/profile <span class="token operator">&amp;></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">'export HISTTIMEFORMAT="%F %T `whoami` "'</span> <span class="token operator">>></span> /etc/profile<span class="token builtin class-name">echo</span> <span class="token string">"export HISTSIZE=500"</span> <span class="token operator">>></span>/etc/profile<span class="token builtin class-name">echo</span> <span class="token string">"export HISTFILESIZE=500"</span> <span class="token operator">>></span> /etc/profile<span class="token keyword">fi</span><span class="token builtin class-name">source</span> /etc/profile</code></pre><h2 id="1-7-内核参数优化"><a href="#1-7-内核参数优化" class="headerlink" title="1.7 内核参数优化"></a>1.7 内核参数优化</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span> /etc/sysctl.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFnet.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv4.icmp_echo_ignore_broadcasts = 1net.ipv4.tcp_syncookies = 1kernel.msgmnb = 65536kernel.msgmax = 65536net.ipv4.tcp_max_tw_buckets = 6000net.ipv4.tcp_sack = 1net.ipv4.tcp_window_scaling = 1net.ipv4.tcp_rmem = 4096 87380 4194304net.ipv4.tcp_wmem = 4096 16384 4194304net.core.wmem_default = 8388608net.core.rmem_default = 8388608net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.ipv4.tcp_tw_recycle = 1vm.max_map_count = 655360EOF</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span></code></pre><h2 id="1-8-系统设置中文字符"><a href="#1-8-系统设置中文字符" class="headerlink" title="1.8 系统设置中文字符"></a>1.8 系统设置中文字符</h2><p>安装中文字符</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kde-l10n-Chinese glibc-common </code></pre><p>设置环境变量</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOFexport LC_ALL=zh_CN.utf8export LANG=zh_CN.utf8export LANGUAGE=zh_CN.utf8EOF</span><span class="token punctuation">)</span> <span class="token operator">>></span> ~/.bashrc <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> localedef <span class="token parameter variable">-c</span> <span class="token parameter variable">-f</span> UTF-8 <span class="token parameter variable">-i</span> zh_CN zh_CN.utf8 <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> ~/.bashrc <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$LANG</span></code></pre><h1 id="二、软件源配置"><a href="#二、软件源配置" class="headerlink" title="二、软件源配置"></a>二、软件源配置</h1><h2 id="2-1-YUM-源"><a href="#2-1-YUM-源" class="headerlink" title="2.1 YUM 源"></a>2.1 YUM 源</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/yum.repos.d/CentOS-* /tmp/<span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoyum clean all <span class="token operator">&amp;&amp;</span> yum makecache</code></pre><h2 id="2-2-PIP-源"><a href="#2-2-PIP-源" class="headerlink" title="2.2 PIP 源"></a>2.2 PIP 源</h2><h2 id="2-3-NPM-源"><a href="#2-3-NPM-源" class="headerlink" title="2.3 NPM 源"></a>2.3 NPM 源</h2><h2 id="2-4-Docker-镜像仓库"><a href="#2-4-Docker-镜像仓库" class="headerlink" title="2.4 Docker 镜像仓库"></a>2.4 Docker 镜像仓库</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span>  /etc/docker/<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'&#123;\n "registry-mirrors": ["https://1e7waog4.mirror.aliyuncs.com"]\n&#125;'</span> <span class="token operator">></span> /etc/docker/daemon.jsonsystemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span></code></pre><h2 id="2-5-Helm-仓库"><a href="#2-5-Helm-仓库" class="headerlink" title="2.5 Helm 仓库"></a>2.5 Helm 仓库</h2><h1 id="三、软件快速安装"><a href="#三、软件快速安装" class="headerlink" title="三、软件快速安装"></a>三、软件快速安装</h1><h2 id="3-1-Docker"><a href="#3-1-Docker" class="headerlink" title="3.1 Docker"></a>3.1 Docker</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span class="token function">mkdir</span> <span class="token parameter variable">-p</span>  /etc/docker/<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'&#123;\n "registry-mirrors": ["https://1e7waog4.mirror.aliyuncs.com"]\n&#125;'</span> <span class="token operator">></span> /etc/docker/daemon.jsonsystemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> bash-completion<span class="token builtin class-name">source</span> /usr/share/bash-completion/bash_completion<span class="token builtin class-name">source</span> /usr/share/bash-completion/completions/docker</code></pre><h2 id="3-2-Docker-Compose"><a href="#3-2-Docker-Compose" class="headerlink" title="3.2 Docker Compose"></a>3.2 Docker Compose</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-SL</span> https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose<span class="token function">docker-compose</span> <span class="token parameter variable">--version</span></code></pre><h2 id="3-3-MySQL-5-7"><a href="#3-3-MySQL-5-7" class="headerlink" title="3.3 MySQL 5.7"></a>3.3 MySQL 5.7</h2><p>安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span><span class="token function">wget</span> https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar <span class="token function">tar</span> <span class="token parameter variable">-xvf</span> mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar <span class="token punctuation">\</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> numactl libaio net-tools perl <span class="token punctuation">\</span><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-common-5.7.27-1.el7.x86_64.rpm <span class="token punctuation">\</span><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-libs-5.7.27-1.el7.x86_64.rpm <span class="token punctuation">\</span><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-client-5.7.27-1.el7.x86_64.rpm <span class="token punctuation">\</span><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-server-5.7.27-1.el7.x86_64.rpm <span class="token punctuation">\</span><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm <span class="token punctuation">\</span>yum clean all <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> mysql* <span class="token punctuation">\</span><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mysql </code></pre><p>配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/my.cnf</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment"># 默认连接端口</span>port <span class="token operator">=</span> <span class="token number">3306</span><span class="token comment"># 用于本地连接的socket套接字</span>socket <span class="token operator">=</span> /var/lib/mysql/mysql.sock<span class="token comment"># pid文件所在目录</span>pid-file <span class="token operator">=</span> /var/run/mysqld/mysqld.pid<span class="token comment"># 数据文件存放的目录</span>datadir <span class="token operator">=</span> /var/lib/mysql<span class="token comment"># MySQL存放临时文件的目录</span>tmpdir <span class="token operator">=</span> /tmp<span class="token comment"># 错误日志配置文件</span>log-error <span class="token operator">=</span> /var/log/mysqld.log<span class="token comment"># 服务端默认编码（数据库级别）</span>character_set_server <span class="token operator">=</span> utf8<span class="token comment"># 服务端默认的比对规则，排序规则</span>collation_server <span class="token operator">=</span> utf8_general_ci<span class="token comment"># 性能优化的引擎，默认关闭</span>performance_schema <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启</span>symbolic-links <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 禁用DNS主机名查找，启用以后用内网地址向mysqlslap请求响应快了一半</span>skip_name_resolve <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 最大可连接数</span>max_connections <span class="token operator">=</span> <span class="token number">800</span><span class="token comment"># 某台host连接错误次数，超过该次数则被屏蔽</span>max_connect_errors <span class="token operator">=</span> <span class="token number">1000</span><span class="token comment"># 数据库事务隔离级别</span>transaction_isolation <span class="token operator">=</span> READ-COMMITTED<span class="token comment"># join优化内存</span>join_buffer_size <span class="token operator">=</span> 128M<span class="token comment"># 内部内存临时表的最大值</span>tmp_table_size <span class="token operator">=</span> 64M<span class="token comment"># 最大接受的数据包大小</span>max_allowed_packet <span class="token operator">=</span> 64M<span class="token comment"># 服务器关闭交互式连接前等待活动的秒数</span>interactive_timeout <span class="token operator">=</span> <span class="token number">1200</span><span class="token comment"># 服务器关闭非交互连接之前等待活动的秒数</span>wait_timeout <span class="token operator">=</span> <span class="token number">600</span><span class="token comment"># 读入缓冲区的大小</span>read_buffer_size <span class="token operator">=</span> 16M<span class="token comment"># 随机读缓冲区大小</span>read_rnd_buffer_size <span class="token operator">=</span> 8M<span class="token comment"># 在每个connection第一次需要使用这个buffer的时候，一次性分配设置的内存</span>sort_buffer_size <span class="token operator">=</span> 8M<span class="token comment"># 定义了你MySQL应该支持的sql语法，对数据的校验等等，限制一些所谓的‘不合法’的操作</span><span class="token assign-left variable">sql_mode</span><span class="token operator">=</span>STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span class="token comment"># 值定义了日志文件的大小</span><span class="token assign-left variable">innodb_log_file_size</span><span class="token operator">=</span>256M</code></pre><p>启动，获取密码</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> mysqld<span class="token function">grep</span> password /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/.*\(............\)$/\1/'</span></code></pre><p>授权</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> password <span class="token keyword">for</span> root@localhost <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'123456Aa.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456Aa.'</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span></code></pre><h2 id="3-4-LAMP"><a href="#3-4-LAMP" class="headerlink" title="3.4 LAMP"></a>3.4 LAMP</h2><p><strong>安装apache</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> httpd httpd-devel <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl start httpd <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> httpd <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl status httpd </code></pre><p><strong>安装mariadb</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> mariadb mariadb-server mariadb-libs mariadb-devel <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl start mariadb <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> mariadb <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl status mariadb</code></pre><p>初始化mariadb</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql_secure_installation</code></pre><p><strong>安装php</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> php php-mysql php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-snmp php-soap <span class="token function">curl</span> curl-devel php-bcmath <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl restart httpd</code></pre><p>测试文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'&lt;?php \n phpinfo(); \n?>'</span> <span class="token operator">></span> /var/www/html/info.php</code></pre><h2 id="3-5-Node-js"><a href="#3-5-Node-js" class="headerlink" title="3.5 Node.js"></a>3.5 Node.js</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://nodejs.org/dist/v10.16.3/node-v10.16.3-linux-x64.tar.xz <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xvf</span> node-v10.16.3-linux-x64.tar.xz <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> node-v10.16.3-linux-x64 <span class="token function">node</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> <span class="token function">node</span> /opt<span class="token comment"># 配置环境变量</span><span class="token function">vim</span> ~/.bashrc<span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_HOME</span><span class="token operator">=</span>/opt/node<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$NODE_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token comment"># 刷新生效</span><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><h2 id="3-6-Nginx"><a href="#3-6-Nginx" class="headerlink" title="3.6 Nginx"></a>3.6 Nginx</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpmyum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginxsystemctl start nginx.servicesystemctl <span class="token builtin class-name">enable</span> nginx.service</code></pre><p>nginx配置文件语法高亮</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://www.vim.org/scripts/download_script.php?src_id<span class="token operator">=</span><span class="token number">14376</span> <span class="token parameter variable">-O</span> nginx.vim<span class="token function">cp</span> nginx.vim /usr/share/vim/vim74/syntax<span class="token builtin class-name">echo</span> <span class="token string">'au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &amp;ft == '</span>' <span class="token operator">|</span> setfiletype nginx <span class="token operator">|</span> endif ' <span class="token operator">>></span> /usr/share/vim/vim74/filetypr.vim</code></pre><h2 id="3-7-Redis"><a href="#3-7-Redis" class="headerlink" title="3.7 Redis"></a>3.7 Redis</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> epel-release <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> redis <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl start redis <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> redis</code></pre><p>编译安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> gcc <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://download.redis.io/releases/redis-5.0.14.tar.gz <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis-5.0.14.tar.gz <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> redis-5.0.14 <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/opt/redis <span class="token function">install</span> <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">cp</span> redis.conf /opt/redis <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">'PATH=$PATH:/opt/redis/bin'</span> <span class="token operator">>></span> ~/.bashrc <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> ~/.bashrc </code></pre><p>修改 &#x2F;etc&#x2F;redis.conf （非必须）</p><pre class="language-bash" data-language="bash"><code class="language-bash">将bind <span class="token number">127.0</span>.0.1 改成 <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0protected-mode <span class="token function">yes</span> 改成 no</code></pre><p>system脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/lib/systemd/system/redis.service</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Redis persistent key-value database<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token assign-left variable">After</span><span class="token operator">=</span>network-online.target<span class="token assign-left variable">Wants</span><span class="token operator">=</span>network-online.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/opt/redis/redis.pid<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/opt/redis/bin/redis-server /opt/redis/redis.conf <span class="token parameter variable">--supervised</span> systemd<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> HUP <span class="token variable">$MAINPID</span><span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> QUIT <span class="token variable">$MAINPID</span><span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">655360</span><span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true<span class="token assign-left variable">Type</span><span class="token operator">=</span>notify<span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">Group</span><span class="token operator">=</span>root<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target</code></pre><h2 id="3-8-编译安装-php5-6"><a href="#3-8-编译安装-php5-6" class="headerlink" title="3.8 编译安装 php5.6"></a>3.8 编译安装 php5.6</h2><p>参考链接：<a href="https://www.cnblogs.com/mike666/p/13958284.html">https://www.cnblogs.com/mike666/p/13958284.html</a></p><p>安装目录：&#x2F;data&#x2F;php_9000</p><p>安装基本工具</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> libxml2 libxml2-devel openssl openssl-devel <span class="token function">bzip2</span> bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel <span class="token parameter variable">-y</span></code></pre><p>下载安装包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://www.php.net/distributions/php-5.6.40.tar.gz</code></pre><p>编译安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/data/php_9000 --with-config-file-path<span class="token operator">=</span>/etc --enable-fpm --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-soap --with-libxml-dir --with-xmlrpc --with-openssl --with-mcrypt --with-mhash --with-pcre-regex --with-sqlite3 --with-zlib --enable-bcmath --with-iconv --with-bz2 --enable-calendar --with-curl --with-cdb --enable-dom --enable-exif --enable-fileinfo --enable-filter --with-pcre-dir --enable-ftp --with-gd --with-openssl-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-freetype-dir --enable-gd-native-ttf --enable-gd-jis-conv --with-gettext --with-gmp --with-mhash --enable-json --enable-mbstring --enable-mbregex --enable-mbregex-backtrack --with-libmbfl --with-onig --enable-pdo --with-mysqli<span class="token operator">=</span>mysqlnd --with-pdo-mysql<span class="token operator">=</span>mysqlnd --with-zlib-dir --with-pdo-sqlite --with-readline --enable-session --enable-shmop --enable-simplexml --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-libxml-dir --with-xsl --enable-zip --enable-mysqlnd-compression-support --with-fpm-group<span class="token operator">=</span>www --with-fpm-user<span class="token operator">=</span>www --enable-pcntl --with-mysql</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>php.ini 配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> php.ini-production /etc/php.ini<span class="token comment"># 修改配置项</span>post_max_size <span class="token operator">=</span> 64Mupload_max_filesize <span class="token operator">=</span> 64Mdate.timezone <span class="token operator">=</span> PRC<span class="token assign-left variable">cgi.fix_pathinfo</span><span class="token operator">=</span><span class="token number">1</span>max_execution_time <span class="token operator">=</span> <span class="token number">300</span></code></pre><p>php-fpm 配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /data/php_9000/etc/<span class="token function">cp</span> php-fpm.conf.default php-fpm.conf<span class="token comment"># 修改配置项</span><span class="token assign-left variable">user</span><span class="token operator">=</span>www<span class="token assign-left variable">group</span><span class="token operator">=</span>www<span class="token comment"># 追加以下内容，PHP进程数的设置</span>pm.max_children <span class="token operator">=</span> <span class="token number">100</span>pm.start_servers <span class="token operator">=</span> <span class="token number">30</span>pm.min_spare_servers <span class="token operator">=</span> <span class="token number">20</span>pm.max_spare_servers <span class="token operator">=</span> <span class="token number">100</span>pm.max_requests <span class="token operator">=</span> <span class="token number">500</span></code></pre><p>启动文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm<span class="token function">chmod</span> +x /etc/init.d/php-fpm</code></pre><h2 id="3-9-JDK"><a href="#3-9-JDK" class="headerlink" title="3.9 JDK"></a>3.9 JDK</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/root/jdk1.8<span class="token comment">#jdk文件目录</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 挂载 OSS 存储</title>
      <link href="/c575dcd3ea60/"/>
      <url>/c575dcd3ea60/</url>
      
        <content type="html"><![CDATA[<p>最近想要一个网盘，以防止电脑上重要数据丢失，但是百度阿里这种云盘使用起来需要下载他们的客户端，使用起来略微麻烦，最好是类似一块 Windows 硬盘挂载到我的电脑上，打开就能用的那种。终于在网上找到一种方案，将对象存储挂载至电脑上，并且对象存储价格低廉，遂记录该方案的实现步骤。</p><span id="more"></span><h1 id="一、下载软件"><a href="#一、下载软件" class="headerlink" title="一、下载软件"></a>一、下载软件</h1><p>Winfsp：<a href="https://winfsp.dev/rel/">https://winfsp.dev/rel/</a></p><p>Rclone：<a href="https://rclone.org/downloads/">https://rclone.org/downloads/</a></p><p>SyncToy：<a href="https://www.majorgeeks.com/files/details/microsoft_synctoy_for_windows_xp.html">https://www.majorgeeks.com/files/details/microsoft_synctoy_for_windows_xp.html</a></p><h1 id="二、配置-Rclone"><a href="#二、配置-Rclone" class="headerlink" title="二、配置 Rclone"></a>二、配置 Rclone</h1><h2 id="2-1-配置环境变量"><a href="#2-1-配置环境变量" class="headerlink" title="2.1 配置环境变量"></a>2.1 配置环境变量</h2><p>1、打开任意文件夹，并在左侧导航目录下找到<strong>此电脑</strong>，单击右键选择<strong>属性 &gt; 高级系统设置 &gt; 环境变量 &gt; 系统变量 &gt; Path</strong>，单击<strong>新建</strong>。</p><p>2、在弹出的窗口中，填写 Rclone 解压后的路径（D:\rclone），单击<strong>确定</strong>。</p><p><img src="/c575dcd3ea60/image-20220801002313643.png" alt="image-20220801002313643"></p><h2 id="2-2-配置-OSS"><a href="#2-2-配置-OSS" class="headerlink" title="2.2 配置 OSS"></a>2.2 配置 OSS</h2><p>1、打开 Windows Powershell，输入<code>rclone --version</code> 命令，按 <strong>Enter</strong>，查看 Rclone 是否成功安装。</p><p><img src="/c575dcd3ea60/image-20220801002400599.png" alt="image-20220801002400599"></p><p>2、确认 Rclone 安装成功后，在 Windows Powershell 中，输入 <code>rclone config</code> 命令，按 <strong>Enter</strong>。</p><p>3、输入 <strong>n</strong> ，按 <strong>Enter</strong>，新建一个 New remote。</p><p>4、输入该磁盘的名称，例如 myoss，按 <strong>Enter</strong></p><p><img src="/c575dcd3ea60/image-20220801002704051.png" alt="image-20220801002704051"></p><p>5、在显示的选项中，选择包含 Alibaba 的选项，即输入<strong>5</strong>，按 <strong>Enter</strong>。</p><p>6、在显示的选项中，选择包含 OSS 的选项，输入<strong>2</strong>，按 <strong>Enter</strong>。</p><p>7、执行到 <code>env_auth&gt;</code> 时，按 Enter。</p><p>8、执行到 <code>access_key_id&gt;</code>时，输入阿里云 OSS 的访问密钥 AccessKey ID，按 <strong>Enter</strong>。</p><p>9、执行到 <code>secret_access_key&gt;</code> 时，输入阿里云 OSS 的访问密钥 AccessKey Secret，按 <strong>Enter</strong>。</p><p>10、选择对应的存储的地域，按 <strong>Enter</strong>。</p><p>11、选择权限类型，根据实际需求选择 private 或者 public-read。输入<strong>3</strong>，按 <strong>Enter</strong>。</p><p>12、在显示的对象存储的存储类型中，您可根据实际需求选择以何种存储类型将文件上传到 OSS。</p><ul><li><p>Default 表示默认</p></li><li><p>Standard storage class 表示标准存储（STANDARD）</p></li><li><p>Infrequent access storage mode 表示低频存储（Standard_IA）</p></li><li><p>Archive storage mode 表示归档存储（ARCHIVE）</p></li></ul><p>13、执行到 <code>Edit advanced config? (y/n)</code> 时，按 <strong>Enter</strong>。</p><p>14、确认信息无误后，按 <strong>Enter</strong>。</p><p>15、输入 <strong>q</strong>，完成配置。</p><h2 id="2-3-修改配置文件"><a href="#2-3-修改配置文件" class="headerlink" title="2.3 修改配置文件"></a>2.3 修改配置文件</h2><p>以上步骤配置完成后，在 <code>C:\Users\用户名\.config\rclone</code> 文件夹下，即可看到一个名称为 rclone.conf 的文件，该文件为 rclone 的配置文件。如果您想要修改 rclone 的配置，可直接对其进行修改。</p><h2 id="2-4-挂载-OSS-为本地磁盘"><a href="#2-4-挂载-OSS-为本地磁盘" class="headerlink" title="2.4 挂载 OSS 为本地磁盘"></a>2.4 挂载 OSS 为本地磁盘</h2><p>如果映射为本地磁盘，则执行命令如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">rclone <span class="token function">mount</span> myoss:/ O: --cache-dir D:<span class="token punctuation">\</span>temp --vfs-cache-mode writes --no-check-certificate</code></pre><ul><li>myoss：替换为用户自定义的磁盘名称。</li><li>O：替换为您想要挂载后，硬盘的盘符名称即可，请不要与本地的 C、D、E 盘等重复。</li><li>D:\temp 为本地缓存目录，可自行设置。</li></ul><p>当出现提示 “The service rclone has been started” 则说明挂载成功。</p><h2 id="2-5-设置开机自启动挂载硬盘"><a href="#2-5-设置开机自启动挂载硬盘" class="headerlink" title="2.5 设置开机自启动挂载硬盘"></a>2.5 设置开机自启动挂载硬盘</h2><p>由于如上操作在电脑重启后，映射的磁盘将会消失，需要再次手工操作。因此，我们可以设置自启动装置，让服务器每次重启后都自动挂载磁盘。</p><ol><li><p>在 Rclone 安装目录 D:\rclone 下，分别新建 startup_rclone.vbs 和 startup_rclone.bat 文件。</p></li><li><p>在 startup_rclone.bat 中，写入如下挂载命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">rclone <span class="token function">mount</span> myoss:/ O: --cache-dir D:<span class="token punctuation">\</span>temp --vfs-cache-mode writes --no-check-certificate <span class="token operator">&amp;</span></code></pre></li><li><p>在 startup_rclone.vbs 中，写入如下代码：</p><pre class="language-vbscript" data-language="vbscript"><code class="language-vbscript">Set Ws &#x3D; CreateObject(&quot;Wscript.Shell&quot;)Ws.Run &quot;cmd &#x2F;c D:\rclone\startup_rclone.bat&quot;,0</code></pre></li><li><p>将 startup_rclone.vbs 文件剪切到 <code>%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code> 文件夹下。</p></li><li><p>重启服务器。</p></li></ol><h1 id="三、配置-SyncToy（可选）"><a href="#三、配置-SyncToy（可选）" class="headerlink" title="三、配置 SyncToy（可选）"></a>三、配置 SyncToy（可选）</h1><p>该工具可以实现两个目录中文件同步，但是经测试，文件同步比较耗时，而且使用的对象存储资源较多，费钱。</p><h2 id="3-1-新建同步盘"><a href="#3-1-新建同步盘" class="headerlink" title="3.1 新建同步盘"></a>3.1 新建同步盘</h2><p>左边本地盘、右边 OSS 盘</p><p><img src="/c575dcd3ea60/image-20220801145215001.png" alt="image-20220801145215001"></p><h2 id="3-2-同步方式"><a href="#3-2-同步方式" class="headerlink" title="3.2 同步方式"></a>3.2 同步方式</h2><p>选择 echo，左边操作同步到右边</p><p><img src="/c575dcd3ea60/image-20220801145248669.png" alt="image-20220801145248669"></p><h2 id="3-3-设定任务名"><a href="#3-3-设定任务名" class="headerlink" title="3.3 设定任务名"></a>3.3 设定任务名</h2><p><img src="/c575dcd3ea60/image-20220801145343654.png" alt="image-20220801145343654"></p><h2 id="3-4-手动同步"><a href="#3-4-手动同步" class="headerlink" title="3.4 手动同步"></a>3.4 手动同步</h2><p>点击 run 手动同步两个盘</p><p><img src="/c575dcd3ea60/image-20220801145410013.png" alt="image-20220801145410013"></p><h2 id="3-5-自动同步"><a href="#3-5-自动同步" class="headerlink" title="3.5 自动同步"></a>3.5 自动同步</h2><p>通过定时任务，自动执行同步任务</p><p>任务栏搜索 “任务计划程序”，点击”创建基本任务”</p><p><img src="/c575dcd3ea60/image-20220801145532471.png" alt="image-20220801145532471"></p><p>设置名称</p><p><img src="/c575dcd3ea60/image-20220801145704883.png" alt="image-20220801145704883"></p><p>触发器</p><p><img src="/c575dcd3ea60/image-20220801145718632.png" alt="image-20220801145718632"></p><p>时间</p><p><img src="/c575dcd3ea60/image-20220801145740933.png" alt="image-20220801145740933"></p><p>操作</p><p><img src="/c575dcd3ea60/image-20220801145749898.png" alt="image-20220801145749898"></p><p>程序位置</p><p><img src="/c575dcd3ea60/image-20220801164020060.png" alt="image-20220801164020060"></p><p>完成</p><p><img src="/c575dcd3ea60/image-20220801145840800.png" alt="image-20220801145840800"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSS </tag>
            
            <tag> Rclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 获取文件的创建时间</title>
      <link href="/d4d8941de2a5/"/>
      <url>/d4d8941de2a5/</url>
      
        <content type="html"><![CDATA[<p>运维工作中经常遇到需要查看日志，有时候需要确定该日志文件的创建时间，由于没有直接的命令可以查看，所以需要使用 stat 搭配 debugfs 组合使用。</p><span id="more"></span><h1 id="获取-Slave-err-的-Inode-码"><a href="#获取-Slave-err-的-Inode-码" class="headerlink" title="获取 Slave.err 的 Inode 码"></a>获取 Slave.err 的 Inode 码</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@python slavemonitor<span class="token punctuation">]</span><span class="token comment"># stat Slave.err </span>  File: ‘Slave.err’  Size: <span class="token number">208806</span>    Blocks: <span class="token number">416</span>        IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>Device: fd01h/64769dInode: <span class="token number">2097509</span>     Links: <span class="token number">1</span>Access: <span class="token punctuation">(</span>0644/-rw-r--r--<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>Access: <span class="token number">2022</span>-05-13 <span class="token number">10</span>:29:12.580057359 +0800Modify: <span class="token number">2022</span>-05-13 <span class="token number">10</span>:04:21.208423148 +0800Change: <span class="token number">2022</span>-05-13 <span class="token number">10</span>:04:21.208423148 +0800 Birth: -</code></pre><h1 id="查看文件所在的磁盘"><a href="#查看文件所在的磁盘" class="headerlink" title="查看文件所在的磁盘"></a>查看文件所在的磁盘</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@python slavemonitor<span class="token punctuation">]</span><span class="token comment"># df -h</span>Filesystem      Size  Used Avail Use% Mounted ondevtmpfs        <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /devtmpfs           <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /dev/shmtmpfs           <span class="token number">1</span>.9G  <span class="token number">8</span>.6M  <span class="token number">1</span>.9G   <span class="token number">1</span>% /runtmpfs           <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /sys/fs/cgroup/dev/vda1        40G   12G   26G  <span class="token number">31</span>% /tmpfs           379M     <span class="token number">0</span>  379M   <span class="token number">0</span>% /run/user/0</code></pre><h1 id="使用-debugfs-获取-crtime-创建时间"><a href="#使用-debugfs-获取-crtime-创建时间" class="headerlink" title="使用 debugfs 获取 crtime 创建时间"></a>使用 debugfs 获取 crtime 创建时间</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@python slavemonitor<span class="token punctuation">]</span><span class="token comment"># debugfs -R 'stat &lt;2097509>' /dev/vda1 </span>debugfs <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>Inode: <span class="token number">2097509</span>   Type: regular    Mode:  0644   Flags: 0x80000Generation: <span class="token number">2270275877</span>    Version: 0x00000000:00000001User:     <span class="token number">0</span>   Group:     <span class="token number">0</span>   Size: <span class="token number">208806</span>File ACL: <span class="token number">0</span>    Directory ACL: <span class="token number">0</span>Links: <span class="token number">1</span>   Blockcount: <span class="token number">416</span>Fragment:  Address: <span class="token number">0</span>    Number: <span class="token number">0</span>    Size: <span class="token number">0</span> ctime: 0x627dbca5:31b123b0 -- Fri May <span class="token number">13</span> <span class="token number">10</span>:04:21 <span class="token number">2022</span> atime: 0x627dc278:8a4be43c -- Fri May <span class="token number">13</span> <span class="token number">10</span>:29:12 <span class="token number">2022</span> mtime: 0x627dbca5:31b123b0 -- Fri May <span class="token number">13</span> <span class="token number">10</span>:04:21 <span class="token number">2022</span>crtime: 0x627a1b08:b91d4718 -- Tue May <span class="token number">10</span> <span class="token number">15</span>:58:00 <span class="token number">2022</span>Size of extra inode fields: <span class="token number">28</span>EXTENTS:<span class="token punctuation">(</span>ETB0<span class="token punctuation">)</span>:8451326, <span class="token punctuation">(</span><span class="token number">0</span>-1<span class="token punctuation">)</span>:8437754-8437755, <span class="token punctuation">(</span><span class="token number">2</span>-3<span class="token punctuation">)</span>:8449822-8449823, <span class="token punctuation">(</span><span class="token number">4</span>-5<span class="token punctuation">)</span>:8449982-8449983, <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>:8421389, <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>:8451325, <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>:8451794, <span class="token punctuation">(</span><span class="token number">9</span>-10<span class="token punctuation">)</span>:8451798-8451799, <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>:8451803, <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>:8451807, <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>:8451811, <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>:8451815, <span class="token punctuation">(</span><span class="token number">15</span>-16<span class="token punctuation">)</span>:8451818-8451819, <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>:84<span class="token number">51823</span>, <span class="token punctuation">(</span><span class="token number">18</span>-19<span class="token punctuation">)</span>:8451829-8451830, <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>:8450431, <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>:8451207, <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>:8451809, <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>:8451813, <span class="token punctuation">(</span><span class="token number">24</span>-25<span class="token punctuation">)</span>:8451834-8451835, <span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span>:8451841, <span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span>:8451847, <span class="token punctuation">(</span><span class="token number">28</span>-29<span class="token punctuation">)</span>:8451854-8451855, <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>:8451860, <span class="token punctuation">(</span><span class="token number">31</span>-32<span class="token punctuation">)</span>:8451866-8451867, <span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span>:8451873, <span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span>:8451879, <span class="token punctuation">(</span><span class="token number">35</span>-36<span class="token punctuation">)</span>:8451885-8451886, <span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span>:8451892, <span class="token punctuation">(</span><span class="token number">38</span>-39<span class="token punctuation">)</span>:8451898-8451899, <span class="token punctuation">(</span><span class="token number">40</span>-41<span class="token punctuation">)</span>:8451905-8451906, <span class="token punctuation">(</span><span class="token number">42</span>-43<span class="token punctuation">)</span>:8451912-8451913, <span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>:8451919, <span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>:8451925, <span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">)</span>:8451931, <span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span>:8451937, <span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>:8451943, <span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span>:8451949, <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>:8451955</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排查 Linux 是否被入侵</title>
      <link href="/10a2516a7bb5/"/>
      <url>/10a2516a7bb5/</url>
      
        <content type="html"><![CDATA[<p>随着开源产品的越来越盛行，作为一个 Linux 系统运维工程师，能够清晰地鉴别异常机器是否已经被入侵了显得至关重要，个人结合自己的工作经历，整理了几种常见的机器被黑情况供参考。</p><span id="more"></span><h1 id="1、查看最近的登陆事件"><a href="#1、查看最近的登陆事件" class="headerlink" title="1、查看最近的登陆事件"></a>1、查看最近的登陆事件</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecs-d886 ~<span class="token punctuation">]</span><span class="token comment"># last</span>root     pts/0        <span class="token number">223.214</span>.252.40   Wed Mar  <span class="token number">8</span> <span class="token number">18</span>:08   still logged <span class="token keyword">in</span>root     pts/0        <span class="token number">49.65</span>.65.53      Wed Feb <span class="token number">22</span> <span class="token number">17</span>:01 - <span class="token number">18</span>:05  <span class="token punctuation">(</span>01:04<span class="token punctuation">)</span>root     pts/1        <span class="token number">49.65</span>.65.53      Wed Feb <span class="token number">15</span> <span class="token number">20</span>:12 - <span class="token number">20</span>:21  <span class="token punctuation">(</span>00:09<span class="token punctuation">)</span>root     pts/0        <span class="token number">49.65</span>.65.53      Wed Feb <span class="token number">15</span> <span class="token number">20</span>:05 - <span class="token number">20</span>:21  <span class="token punctuation">(</span>00:16<span class="token punctuation">)</span>root     pts/0        <span class="token number">221.231</span>.165.167  Sat Feb <span class="token number">11</span> <span class="token number">22</span>:29 - 00:50  <span class="token punctuation">(</span>02:20<span class="token punctuation">)</span>root     pts/0        <span class="token number">221.231</span>.165.167  Sat Feb <span class="token number">11</span> <span class="token number">18</span>:25 - <span class="token number">21</span>:23  <span class="token punctuation">(</span>02:57<span class="token punctuation">)</span>root     pts/0        <span class="token number">221.231</span>.165.167  Sat Feb <span class="token number">11</span> <span class="token number">14</span>:47 - <span class="token number">17</span>:41  <span class="token punctuation">(</span>02:54<span class="token punctuation">)</span><span class="token function">reboot</span>   system boot  <span class="token number">4.18</span>.0-348.7.1.e Sat Feb <span class="token number">11</span> <span class="token number">14</span>:46   still runningwtmp begins Fri Jul  <span class="token number">8</span> <span class="token number">11</span>:49:25 <span class="token number">2022</span><span class="token punctuation">[</span>root@ecs-d886 ~<span class="token punctuation">]</span><span class="token comment"># lastlog </span>Username         Port     From             Latestroot             pts/0    <span class="token number">223.214</span>.252.40   Wed Mar  <span class="token number">8</span> <span class="token number">18</span>:08:49 +0800 <span class="token number">2023</span>bin                                        **Never logged in**daemon                                     **Never logged in**adm                                        **Never logged in**lp                                         **Never logged in**<span class="token function">sync</span>                                       **Never logged in**<span class="token function">shutdown</span>                                   **Never logged in**<span class="token function">halt</span>                                       **Never logged in**mail                                       **Never logged in**operator                                   **Never logged in**games                                      **Never logged in**<span class="token function">ftp</span>                                        **Never logged in**nobody                                     **Never logged in**dbus                                       **Never logged in**systemd-coredump                           **Never logged in**systemd-resolve                            **Never logged in**tss                                        **Never logged in**polkitd                                    **Never logged in**unbound                                    **Never logged in**postfix                                    **Never logged in**sssd                                       **Never logged in**sshd                                       **Never logged in**chrony                                     **Never logged in**rngd                                       **Never logged in**tcpdump                                    **Never logged in**</code></pre><h1 id="2、查看当前登录的用户"><a href="#2、查看当前登录的用户" class="headerlink" title="2、查看当前登录的用户"></a>2、查看当前登录的用户</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecs-d886 ~<span class="token punctuation">]</span><span class="token comment"># w</span> <span class="token number">18</span>:20:07 up <span class="token number">25</span> days,  <span class="token number">3</span>:33,  <span class="token number">1</span> user,  load average: <span class="token number">0.00</span>, <span class="token number">0.00</span>, <span class="token number">0.00</span><span class="token environment constant">USER</span>     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     pts/0    <span class="token number">223.214</span>.252.40   <span class="token number">18</span>:08    <span class="token number">0</span>.00s  <span class="token number">0</span>.01s  <span class="token number">0</span>.00s w</code></pre><h1 id="3、相应的系统日志"><a href="#3、相应的系统日志" class="headerlink" title="3、相应的系统日志"></a>3、相应的系统日志</h1><p>查看 secure 日志，查看登录日志</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecs-d886 ~<span class="token punctuation">]</span><span class="token comment"># cat /var/log/secure | grep -i 'accepted password'</span>Mar  <span class="token number">8</span> <span class="token number">18</span>:08:49 ecs-d886 sshd<span class="token punctuation">[</span><span class="token number">86991</span><span class="token punctuation">]</span>: Accepted password <span class="token keyword">for</span> root from <span class="token number">223.214</span>.252.40 port <span class="token number">10911</span> ssh2</code></pre><h1 id="4、使用-top-命令查看异常进程"><a href="#4、使用-top-命令查看异常进程" class="headerlink" title="4、使用 top 命令查看异常进程"></a>4、使用 top 命令查看异常进程</h1><p>top命令，查看到异常进程后，使用命令 <code>ll /proc/$&#123;pid&#125;/exe</code>，查看具体的应用程序</p><h1 id="5、查看密码文件有无新增用户"><a href="#5、查看密码文件有无新增用户" class="headerlink" title="5、查看密码文件有无新增用户"></a>5、查看密码文件有无新增用户</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ecs-d886 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/passwd</span>root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:65534:65534:Kernel Overflow User:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinsystemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologinsystemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpolkitd:x:998:996:User <span class="token keyword">for</span> polkitd:/:/sbin/nologinunbound:x:997:995:Unbound DNS resolver:/etc/unbound:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsssd:x:996:993:User <span class="token keyword">for</span> sssd:/:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinchrony:x:995:992::/var/lib/chrony:/sbin/nologinrngd:x:994:991:Random Number Generator Daemon:/var/lib/rngd:/sbin/nologintcpdump:x:72:72::/:/sbin/nologin</code></pre><h1 id="6、查看是否有免密登录的主机"><a href="#6、查看是否有免密登录的主机" class="headerlink" title="6、查看是否有免密登录的主机"></a>6、查看是否有免密登录的主机</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /root/.ssh/authorized_keys</code></pre><h1 id="7、查看历史命令"><a href="#7、查看历史命令" class="headerlink" title="7、查看历史命令"></a>7、查看历史命令</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /root/.bash_history </code></pre><h1 id="8、查看某个时间点后创建的文件"><a href="#8、查看某个时间点后创建的文件" class="headerlink" title="8、查看某个时间点后创建的文件"></a>8、查看某个时间点后创建的文件</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-newermt</span> <span class="token string">'2020-03-01 16:34:00'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
